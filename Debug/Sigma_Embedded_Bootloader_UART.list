
Sigma_Embedded_Bootloader_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f4c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052ec  080052ec  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052f4  080052f4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052f4  080052f4  000152f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080052fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000002c  08005328  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08005328  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011242  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002959  00000000  00000000  000312a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00033c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  000348e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a72  00000000  00000000  000354c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010781  00000000  00000000  0005cf3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faeaa  00000000  00000000  0006d6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  001685b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000002c 	.word	0x2000002c
 8000210:	00000000 	.word	0x00000000
 8000214:	08005128 	.word	0x08005128

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000030 	.word	0x20000030
 8000230:	08005128 	.word	0x08005128

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <SIGMA_GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static uint32_t SIGMA_GetPage(uint32_t Addr)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SIGMA_GetPage+0x8c>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000568:	4293      	cmp	r3, r2
 800056a:	d00e      	beq.n	800058a <SIGMA_GetPage+0x36>
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <SIGMA_GetPage+0x8c>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d008      	beq.n	8000586 <SIGMA_GetPage+0x32>
 8000574:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <SIGMA_GetPage+0x8c>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	029b      	lsls	r3, r3, #10
 800057a:	085a      	lsrs	r2, r3, #1
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <SIGMA_GetPage+0x90>)
 800057e:	4013      	ands	r3, r2
 8000580:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000584:	e002      	b.n	800058c <SIGMA_GetPage+0x38>
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <SIGMA_GetPage+0x94>)
 8000588:	e000      	b.n	800058c <SIGMA_GetPage+0x38>
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <SIGMA_GetPage+0x94>)
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4293      	cmp	r3, r2
 8000590:	d905      	bls.n	800059e <SIGMA_GetPage+0x4a>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000598:	0adb      	lsrs	r3, r3, #11
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e019      	b.n	80005d2 <SIGMA_GetPage+0x7e>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <SIGMA_GetPage+0x8c>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00e      	beq.n	80005c8 <SIGMA_GetPage+0x74>
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <SIGMA_GetPage+0x8c>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <SIGMA_GetPage+0x70>
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <SIGMA_GetPage+0x8c>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	029b      	lsls	r3, r3, #10
 80005b8:	085a      	lsrs	r2, r3, #1
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <SIGMA_GetPage+0x90>)
 80005bc:	4013      	ands	r3, r2
 80005be:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80005c2:	e002      	b.n	80005ca <SIGMA_GetPage+0x76>
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <SIGMA_GetPage+0x94>)
 80005c6:	e000      	b.n	80005ca <SIGMA_GetPage+0x76>
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <SIGMA_GetPage+0x94>)
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	0adb      	lsrs	r3, r3, #11
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  return page;
 80005d2:	68fb      	ldr	r3, [r7, #12]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	0bfa05e0 	.word	0x0bfa05e0
 80005e4:	001ffe00 	.word	0x001ffe00
 80005e8:	08040000 	.word	0x08040000

080005ec <SIGMA_GetBank>:
  * @brief  Gets the bank of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The bank of a given address
  */
static uint32_t SIGMA_GetBank(uint32_t Addr)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  return FLASH_BANK_1;
 80005f4:	2301      	movs	r3, #1
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <SIGMA_Iflash_Erase>:
 * Unlocking Internal Flash before doing any action
 *
 * @return  Standard 1/FALSE
 */

HAL_StatusTypeDef SIGMA_Iflash_Erase (uint32_t address) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
      
	HAL_StatusTypeDef      status          = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	77fb      	strb	r3, [r7, #31]
	uint32_t               PageError       = 0u;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef EraseInitStruct = {};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]

	//
	// Unlock the flash to enable the flash control register access.
	//
	HAL_FLASH_Unlock();
 8000622:	f001 f82d 	bl	8001680 <HAL_FLASH_Unlock>

  /* Erase the user Flash area
  (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

  /* Get the 1st page to erase */
  FirstPage = SIGMA_GetPage(address);
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ff94 	bl	8000554 <SIGMA_GetPage>
 800062c:	4603      	mov	r3, r0
 800062e:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <SIGMA_Iflash_Erase+0x94>)
 8000630:	6013      	str	r3, [r2, #0]

  /* Get the last page to erase */
  LastPage = SIGMA_GetPage(FLASH_BANK1_END);
 8000632:	481a      	ldr	r0, [pc, #104]	; (800069c <SIGMA_Iflash_Erase+0x98>)
 8000634:	f7ff ff8e 	bl	8000554 <SIGMA_GetPage>
 8000638:	4603      	mov	r3, r0
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <SIGMA_Iflash_Erase+0x9c>)
 800063c:	6013      	str	r3, [r2, #0]

  /* Get the number of pages to erase from 1st page */
  NbOfPages = LastPage - FirstPage + 1;
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <SIGMA_Iflash_Erase+0x9c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <SIGMA_Iflash_Erase+0x94>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	3301      	adds	r3, #1
 800064a:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <SIGMA_Iflash_Erase+0xa0>)
 800064c:	6013      	str	r3, [r2, #0]

  /* Get the bank */
  BankNumber = SIGMA_GetBank(address);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff ffcc 	bl	80005ec <SIGMA_GetBank>
 8000654:	4603      	mov	r3, r0
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <SIGMA_Iflash_Erase+0xa4>)
 8000658:	6013      	str	r3, [r2, #0]

	//
	// Setup to erase the user flash area a sector at a time.
	//
	EraseInitStruct.Banks         = BankNumber;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <SIGMA_Iflash_Erase+0xa4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000660:	2302      	movs	r3, #2
 8000662:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbPages       = NbOfPages;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <SIGMA_Iflash_Erase+0xa0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Page          = FirstPage;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <SIGMA_Iflash_Erase+0x94>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	613b      	str	r3, [r7, #16]

	//
	// Erase sectors in increasing order until complete or error encountered.
	//

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 8000670:	f107 0218 	add.w	r2, r7, #24
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4611      	mov	r1, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f8ba 	bl	80017f4 <HAL_FLASHEx_Erase>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SIGMA_Iflash_Erase+0x86>
		status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	77fb      	strb	r3, [r7, #31]

	//
	// Lock the flash to disable the flash control register access. (recommended
	// to protect the flash memory against possible unwanted operation)
	//
	HAL_FLASH_Lock();
 800068a:	f001 f81b 	bl	80016c4 <HAL_FLASH_Lock>

	ERROR:
	    //
	    // If any unahndled error still remains, return 1, otherwise 0.
	    //
	    return status;
 800068e:	7ffb      	ldrb	r3, [r7, #31]
    
}
 8000690:	4618      	mov	r0, r3
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000004c 	.word	0x2000004c
 800069c:	0803ffff 	.word	0x0803ffff
 80006a0:	20000050 	.word	0x20000050
 80006a4:	20000054 	.word	0x20000054
 80006a8:	20000058 	.word	0x20000058

080006ac <SIGMA_Iflash_Write>:
 * @param   size     Size of the data buffer
 * @return  Standard 1/0
 */
HAL_StatusTypeDef SIGMA_Iflash_Write(   uint32_t             address,
                                        uint8_t     *        pData,
                                        uint32_t             size) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]

	uint32_t  nBytesWritten       = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef   status    = HAL_OK;
 80006bc:	2300      	movs	r3, #0
 80006be:	76fb      	strb	r3, [r7, #27]
  uint64_t Data_64 = 0;
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	//
	// If the size of the data buffer is zero, skip.
	//
	if (!size) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d102      	bne.n	80006d8 <SIGMA_Iflash_Write+0x2c>
	  status = HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	76fb      	strb	r3, [r7, #27]
    goto ERROR;
 80006d6:	e020      	b.n	800071a <SIGMA_Iflash_Write+0x6e>
	}
	//
	// Unlock the flash to enable the flash control register access.
	//
	HAL_FLASH_Unlock();
 80006d8:	f000 ffd2 	bl	8001680 <HAL_FLASH_Unlock>
	//

	do {
    //Data_64 = bytesTo64Bit(pData);

	  if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *((uint64_t *) pData)) == HAL_OK){
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006e2:	68f9      	ldr	r1, [r7, #12]
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 ff89 	bl	80015fc <HAL_FLASH_Program>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d109      	bne.n	8000704 <SIGMA_Iflash_Write+0x58>
      address        += IFLASH_DOUBLE_WORD_SIZE ;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3308      	adds	r3, #8
 80006f4:	60fb      	str	r3, [r7, #12]
	    nBytesWritten  += IFLASH_DOUBLE_WORD_SIZE ;
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3308      	adds	r3, #8
 80006fa:	61fb      	str	r3, [r7, #28]
      pData          += IFLASH_DOUBLE_WORD_SIZE ; // Point to next Double word
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3308      	adds	r3, #8
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	e001      	b.n	8000708 <SIGMA_Iflash_Write+0x5c>

    }else{
      status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	76fb      	strb	r3, [r7, #27]
    }

	} while ((nBytesWritten < size) && (status != HAL_ERROR));
 8000708:	69fa      	ldr	r2, [r7, #28]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	d202      	bcs.n	8000716 <SIGMA_Iflash_Write+0x6a>
 8000710:	7efb      	ldrb	r3, [r7, #27]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d1e2      	bne.n	80006dc <SIGMA_Iflash_Write+0x30>

	//
	// Lock the flash to disable the flash control register access. (recommended
	// to protect the flash memory against possible unwanted operation)
	//
	HAL_FLASH_Lock();
 8000716:	f000 ffd5 	bl	80016c4 <HAL_FLASH_Lock>

	ERROR:
	  //
	  // If any unahndled error still remains, return 1, otherwise 0.
	  //
	  return status;
 800071a:	7efb      	ldrb	r3, [r7, #27]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <JumpToAPP>:
 * @brief   Jump to Main Application.
 * @param   void
 * @return  void
 */

void JumpToAPP(void){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072a:	b672      	cpsid	i
}
 800072c:	bf00      	nop

	/* Disable Systick interrupt */
	__disable_irq();
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <JumpToAPP+0x50>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a10      	ldr	r2, [pc, #64]	; (8000774 <JumpToAPP+0x50>)
 8000734:	f023 0302 	bic.w	r3, r3, #2
 8000738:	6013      	str	r3, [r2, #0]

	/* Initialize user application's Stack Pointer & Jump to user application */
	JumpToApplication = (pFunction) (*(__IO uint32_t*) (FLASH_APP_START_ADDRESS + 4));
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <JumpToAPP+0x54>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <JumpToAPP+0x58>)
 8000742:	601a      	str	r2, [r3, #0]

	__set_MSP(*(__IO uint32_t*) FLASH_APP_START_ADDRESS);
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <JumpToAPP+0x5c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f383 8808 	msr	MSP, r3
}
 8000750:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
}
 8000756:	bf00      	nop
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000758:	f3bf 8f5f 	dmb	sy
}
 800075c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800075e:	f3bf 8f6f 	isb	sy
}
 8000762:	bf00      	nop
  __DSB();
  __DMB();
  __ISB();

	JumpToApplication();
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <JumpToAPP+0x58>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4798      	blx	r3
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	e000e010 	.word	0xe000e010
 8000778:	08020004 	.word	0x08020004
 800077c:	20000048 	.word	0x20000048
 8000780:	08020000 	.word	0x08020000

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 fceb 	bl	8001162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f82c 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f000 f8c8 	bl	8000924 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000794:	f000 f87a 	bl	800088c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SIGMA_Uart_Transmit_str((uint8_t*)"\n\r================================\n\r");
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <main+0x4c>)
 800079a:	f000 f909 	bl	80009b0 <SIGMA_Uart_Transmit_str>
  SIGMA_Uart_Transmit_str((uint8_t*)"Welcome To Sigma Embedded\n\r");  
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <main+0x50>)
 80007a0:	f000 f906 	bl	80009b0 <SIGMA_Uart_Transmit_str>
  SIGMA_Uart_Transmit_str((uint8_t*)"\n\r================================\n\r");
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <main+0x4c>)
 80007a6:	f000 f903 	bl	80009b0 <SIGMA_Uart_Transmit_str>
  SIGMA_Uart_Transmit_str((uint8_t*)"UART Bootloader Example\n\r"); 
 80007aa:	480b      	ldr	r0, [pc, #44]	; (80007d8 <main+0x54>)
 80007ac:	f000 f900 	bl	80009b0 <SIGMA_Uart_Transmit_str>
  SIGMA_Uart_Transmit_str((uint8_t*)"\n\r================================\n\r");
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <main+0x4c>)
 80007b2:	f000 f8fd 	bl	80009b0 <SIGMA_Uart_Transmit_str>
  SIGMA_Uart_Transmit_str((uint8_t*)"Based On Ferenc Nemeth Work\n\r"); 
 80007b6:	4809      	ldr	r0, [pc, #36]	; (80007dc <main+0x58>)
 80007b8:	f000 f8fa 	bl	80009b0 <SIGMA_Uart_Transmit_str>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Ask for new data and start the Xmodem protocol. */
    SIGMA_Uart_Transmit_str((uint8_t*)"Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <main+0x5c>)
 80007be:	f000 f8f7 	bl	80009b0 <SIGMA_Uart_Transmit_str>
    SIGMA_Xmodem_Receive();
 80007c2:	f000 f93f 	bl	8000a44 <SIGMA_Xmodem_Receive>
    /* We only exit the xmodem protocol, if there are any errors.
     * In that case, notify the user and start over. */
    SIGMA_Uart_Transmit_str((uint8_t*)"\n\rFailed... Please try again.\n\r");
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <main+0x60>)
 80007c8:	f000 f8f2 	bl	80009b0 <SIGMA_Uart_Transmit_str>
  {
 80007cc:	e7f6      	b.n	80007bc <main+0x38>
 80007ce:	bf00      	nop
 80007d0:	08005140 	.word	0x08005140
 80007d4:	08005168 	.word	0x08005168
 80007d8:	08005184 	.word	0x08005184
 80007dc:	080051a0 	.word	0x080051a0
 80007e0:	080051c0 	.word	0x080051c0
 80007e4:	08005210 	.word	0x08005210

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b098      	sub	sp, #96	; 0x60
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2248      	movs	r2, #72	; 0x48
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fc8e 	bl	8005118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800080a:	2000      	movs	r0, #0
 800080c:	f001 fa70 	bl	8001cf0 <HAL_PWREx_ControlVoltageScaling>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000816:	f000 f8a9 	bl	800096c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800081a:	2310      	movs	r3, #16
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800081e:	2301      	movs	r3, #1
 8000820:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000822:	2300      	movs	r3, #0
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000826:	2360      	movs	r3, #96	; 0x60
 8000828:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800082e:	2301      	movs	r3, #1
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000836:	2337      	movs	r3, #55	; 0x37
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800083a:	2307      	movs	r3, #7
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083e:	2302      	movs	r3, #2
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0318 	add.w	r3, r7, #24
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fae0 	bl	8001e10 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000856:	f000 f889 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2105      	movs	r1, #5
 8000872:	4618      	mov	r0, r3
 8000874:	f001 ffa2 	bl	80027bc <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800087e:	f000 f875 	bl	800096c <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3760      	adds	r7, #96	; 0x60
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 8000892:	4a23      	ldr	r2, [pc, #140]	; (8000920 <MX_LPUART1_UART_Init+0x94>)
 8000894:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008d6:	f002 ff6b 	bl	80037b0 <HAL_UART_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008e0:	f000 f844 	bl	800096c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008e8:	f004 fb27 	bl	8004f3a <HAL_UARTEx_SetTxFifoThreshold>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008f2:	f000 f83b 	bl	800096c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4808      	ldr	r0, [pc, #32]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 80008fa:	f004 fb5c 	bl	8004fb6 <HAL_UARTEx_SetRxFifoThreshold>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000904:	f000 f832 	bl	800096c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 800090a:	f004 fadd 	bl	8004ec8 <HAL_UARTEx_DisableFifoMode>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000914:	f000 f82a 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000005c 	.word	0x2000005c
 8000920:	40008000 	.word	0x40008000

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_GPIO_Init+0x44>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <MX_GPIO_Init+0x44>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_GPIO_Init+0x44>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_GPIO_Init+0x44>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <MX_GPIO_Init+0x44>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_GPIO_Init+0x44>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800095a:	f001 fa25 	bl	8001da8 <HAL_PWREx_EnableVddIO2>

}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <SIGMA_Uart_Receive>:
 * @param   *data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uart_status SIGMA_Uart_Receive(uint8_t *data, uint16_t length)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	807b      	strh	r3, [r7, #2]
  uart_status status = UART_ERROR;
 8000984:	23ff      	movs	r3, #255	; 0xff
 8000986:	73fb      	strb	r3, [r7, #15]

  if (HAL_OK == HAL_UART_Receive(&hlpuart1, data, length, UART_TIMEOUT))
 8000988:	887a      	ldrh	r2, [r7, #2]
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <SIGMA_Uart_Receive+0x34>)
 8000992:	f002 ffeb 	bl	800396c <HAL_UART_Receive>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <SIGMA_Uart_Receive+0x28>
  {
    status = UART_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000005c 	.word	0x2000005c

080009b0 <SIGMA_Uart_Transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status SIGMA_Uart_Transmit_str(uint8_t *data)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 80009b8:	23ff      	movs	r3, #255	; 0xff
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 80009bc:	2300      	movs	r3, #0
 80009be:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 80009c0:	e002      	b.n	80009c8 <SIGMA_Uart_Transmit_str+0x18>
  {
    length++;
 80009c2:	89bb      	ldrh	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 80009c8:	89bb      	ldrh	r3, [r7, #12]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1f6      	bne.n	80009c2 <SIGMA_Uart_Transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&hlpuart1, data, length, UART_TIMEOUT))
 80009d4:	89ba      	ldrh	r2, [r7, #12]
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <SIGMA_Uart_Transmit_str+0x48>)
 80009de:	f002 ff37 	bl	8003850 <HAL_UART_Transmit>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <SIGMA_Uart_Transmit_str+0x3c>
  {
    status = UART_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000005c 	.word	0x2000005c

080009fc <SIGMA_Uart_Transmit_ch>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
uart_status SIGMA_Uart_Transmit_ch(uint8_t data)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  uart_status status = UART_ERROR;
 8000a06:	23ff      	movs	r3, #255	; 0xff
 8000a08:	73fb      	strb	r3, [r7, #15]

  /* Make available the UART module. */
  if (HAL_UART_STATE_TIMEOUT == HAL_UART_GetState(&hlpuart1))
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <SIGMA_Uart_Transmit_ch+0x44>)
 8000a0c:	f003 fcc8 	bl	80043a0 <HAL_UART_GetState>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2ba0      	cmp	r3, #160	; 0xa0
 8000a14:	d102      	bne.n	8000a1c <SIGMA_Uart_Transmit_ch+0x20>
  {
    HAL_UART_Abort(&hlpuart1);
 8000a16:	480a      	ldr	r0, [pc, #40]	; (8000a40 <SIGMA_Uart_Transmit_ch+0x44>)
 8000a18:	f003 f870 	bl	8003afc <HAL_UART_Abort>
  }

  if (HAL_OK == HAL_UART_Transmit(&hlpuart1, &data, 1u, UART_TIMEOUT))
 8000a1c:	1df9      	adds	r1, r7, #7
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	2201      	movs	r2, #1
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <SIGMA_Uart_Transmit_ch+0x44>)
 8000a26:	f002 ff13 	bl	8003850 <HAL_UART_Transmit>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <SIGMA_Uart_Transmit_ch+0x38>
  {
    status = UART_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000005c 	.word	0x2000005c

08000a44 <SIGMA_Xmodem_Receive>:
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  void
 */
void SIGMA_Xmodem_Receive(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  volatile xmodem_status status = X_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	717b      	strb	r3, [r7, #5]
  uint8_t error_number = 0u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	713b      	strb	r3, [r7, #4]

  x_first_packet_received = false;
 8000a52:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <SIGMA_Xmodem_Receive+0x10c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
  xmodem_packet_number = 1u;
 8000a58:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <SIGMA_Xmodem_Receive+0x110>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
  xmodem_actual_flash_address = FLASH_APP_START_ADDRESS;
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <SIGMA_Xmodem_Receive+0x114>)
 8000a60:	4a3e      	ldr	r2, [pc, #248]	; (8000b5c <SIGMA_Xmodem_Receive+0x118>)
 8000a62:	601a      	str	r2, [r3, #0]

  /* Loop until there isn't any error (or until we jump to the user application). */
  while (X_OK == status)
 8000a64:	e06a      	b.n	8000b3c <SIGMA_Xmodem_Receive+0xf8>
  {
    uint8_t header = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	70fb      	strb	r3, [r7, #3]

    /* Get the header from UART. */
    uart_status comm_status = SIGMA_Uart_Receive(&header, 1u);
 8000a6a:	1cfb      	adds	r3, r7, #3
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff82 	bl	8000978 <SIGMA_Uart_Receive>
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]

    /* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
    if ((UART_OK != comm_status) && (false == x_first_packet_received))
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <SIGMA_Xmodem_Receive+0x4a>
 8000a7e:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <SIGMA_Xmodem_Receive+0x10c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <SIGMA_Xmodem_Receive+0x4a>
    {
      (void)SIGMA_Uart_Transmit_ch(X_C);
 8000a86:	2043      	movs	r0, #67	; 0x43
 8000a88:	f7ff ffb8 	bl	80009fc <SIGMA_Uart_Transmit_ch>
 8000a8c:	e00d      	b.n	8000aaa <SIGMA_Xmodem_Receive+0x66>
    }
    /* Uart timeout or any other errors. */
    else if ((UART_OK != comm_status) && (true == x_first_packet_received))
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00a      	beq.n	8000aaa <SIGMA_Xmodem_Receive+0x66>
 8000a94:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <SIGMA_Xmodem_Receive+0x10c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d106      	bne.n	8000aaa <SIGMA_Xmodem_Receive+0x66>
    {
      status = SIGMA_Xmodem_Error_Handler(&error_number, X_MAX_ERRORS);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f98f 	bl	8000dc4 <SIGMA_Xmodem_Error_Handler>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	717b      	strb	r3, [r7, #5]
    {
      /* Do nothing. */
    }

    /* The header can be: SOH, STX, EOT and CAN. */
    switch(header)
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	2b18      	cmp	r3, #24
 8000aae:	d037      	beq.n	8000b20 <SIGMA_Xmodem_Receive+0xdc>
 8000ab0:	2b18      	cmp	r3, #24
 8000ab2:	dc38      	bgt.n	8000b26 <SIGMA_Xmodem_Receive+0xe2>
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	dc02      	bgt.n	8000abe <SIGMA_Xmodem_Receive+0x7a>
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	dc03      	bgt.n	8000ac4 <SIGMA_Xmodem_Receive+0x80>
 8000abc:	e033      	b.n	8000b26 <SIGMA_Xmodem_Receive+0xe2>
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d022      	beq.n	8000b08 <SIGMA_Xmodem_Receive+0xc4>
 8000ac2:	e030      	b.n	8000b26 <SIGMA_Xmodem_Receive+0xe2>
      xmodem_status packet_status = X_ERROR;
      /* 128 or 1024 bytes of data. */
      case X_SOH:
      case X_STX:
        /* If the handling was successful, then send an ACK. */
        packet_status = SIGMA_Xmodem_Handle_Packet(header);
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f888 	bl	8000bdc <SIGMA_Xmodem_Handle_Packet>
 8000acc:	4603      	mov	r3, r0
 8000ace:	71bb      	strb	r3, [r7, #6]
        if (X_OK == packet_status)
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d103      	bne.n	8000ade <SIGMA_Xmodem_Receive+0x9a>
        {
          (void)SIGMA_Uart_Transmit_ch(X_ACK);
 8000ad6:	2006      	movs	r0, #6
 8000ad8:	f7ff ff90 	bl	80009fc <SIGMA_Uart_Transmit_ch>
        /* Error while processing the packet, either send a NAK or do graceful abort. */
        else
        {
          status = SIGMA_Xmodem_Error_Handler(&error_number, X_MAX_ERRORS);
        }
        break;
 8000adc:	e02e      	b.n	8000b3c <SIGMA_Xmodem_Receive+0xf8>
        else if (X_ERROR_FLASH == packet_status)
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d109      	bne.n	8000af8 <SIGMA_Xmodem_Receive+0xb4>
          error_number = X_MAX_ERRORS;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	713b      	strb	r3, [r7, #4]
          status = SIGMA_Xmodem_Error_Handler(&error_number, X_MAX_ERRORS);
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2103      	movs	r1, #3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f969 	bl	8000dc4 <SIGMA_Xmodem_Error_Handler>
 8000af2:	4603      	mov	r3, r0
 8000af4:	717b      	strb	r3, [r7, #5]
        break;
 8000af6:	e021      	b.n	8000b3c <SIGMA_Xmodem_Receive+0xf8>
          status = SIGMA_Xmodem_Error_Handler(&error_number, X_MAX_ERRORS);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2103      	movs	r1, #3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f961 	bl	8000dc4 <SIGMA_Xmodem_Error_Handler>
 8000b02:	4603      	mov	r3, r0
 8000b04:	717b      	strb	r3, [r7, #5]
        break;
 8000b06:	e019      	b.n	8000b3c <SIGMA_Xmodem_Receive+0xf8>
      /* End of Transmission. */
      case X_EOT:
        /* ACK, feedback to user (as a text), then jump to user application. */
        (void)SIGMA_Uart_Transmit_ch(X_ACK);
 8000b08:	2006      	movs	r0, #6
 8000b0a:	f7ff ff77 	bl	80009fc <SIGMA_Uart_Transmit_ch>
        (void)SIGMA_Uart_Transmit_str((uint8_t*)"\n\rFirmware updated!\n\r");
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <SIGMA_Xmodem_Receive+0x11c>)
 8000b10:	f7ff ff4e 	bl	80009b0 <SIGMA_Uart_Transmit_str>
        (void)SIGMA_Uart_Transmit_str((uint8_t*)"Jumping to user application...\n\r");
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <SIGMA_Xmodem_Receive+0x120>)
 8000b16:	f7ff ff4b 	bl	80009b0 <SIGMA_Uart_Transmit_str>
        JumpToAPP();
 8000b1a:	f7ff fe03 	bl	8000724 <JumpToAPP>
        break;
 8000b1e:	e00d      	b.n	8000b3c <SIGMA_Xmodem_Receive+0xf8>
      /* Abort from host. */
      case X_CAN:
        status = X_ERROR;
 8000b20:	23ff      	movs	r3, #255	; 0xff
 8000b22:	717b      	strb	r3, [r7, #5]
        break;
 8000b24:	e00a      	b.n	8000b3c <SIGMA_Xmodem_Receive+0xf8>
      default:
        /* Wrong header. */
        if (UART_OK == comm_status)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d106      	bne.n	8000b3a <SIGMA_Xmodem_Receive+0xf6>
        {
          status = SIGMA_Xmodem_Error_Handler(&error_number, X_MAX_ERRORS);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2103      	movs	r1, #3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f947 	bl	8000dc4 <SIGMA_Xmodem_Error_Handler>
 8000b36:	4603      	mov	r3, r0
 8000b38:	717b      	strb	r3, [r7, #5]
        }
        break;
 8000b3a:	bf00      	nop
  while (X_OK == status)
 8000b3c:	797b      	ldrb	r3, [r7, #5]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d090      	beq.n	8000a66 <SIGMA_Xmodem_Receive+0x22>
    }
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000f4 	.word	0x200000f4
 8000b54:	20000000 	.word	0x20000000
 8000b58:	200000f0 	.word	0x200000f0
 8000b5c:	08020000 	.word	0x08020000
 8000b60:	08005230 	.word	0x08005230
 8000b64:	08005248 	.word	0x08005248

08000b68 <SIGMA_Xmodem_Calc_crc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t SIGMA_Xmodem_Calc_crc(uint8_t *data, uint16_t length)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8000b74:	2300      	movs	r3, #0
 8000b76:	81fb      	strh	r3, [r7, #14]
    while (length)
 8000b78:	e026      	b.n	8000bc8 <SIGMA_Xmodem_Calc_crc+0x60>
    {
        length--;
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	4053      	eors	r3, r2
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	737b      	strb	r3, [r7, #13]
 8000b9a:	e012      	b.n	8000bc2 <SIGMA_Xmodem_Calc_crc+0x5a>
        {
            if (crc & 0x8000u)
 8000b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da08      	bge.n	8000bb6 <SIGMA_Xmodem_Calc_crc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000bae:	f083 0301 	eor.w	r3, r3, #1
 8000bb2:	81fb      	strh	r3, [r7, #14]
 8000bb4:	e002      	b.n	8000bbc <SIGMA_Xmodem_Calc_crc+0x54>
            }
            else
            {
                crc = crc << 1u;
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	737b      	strb	r3, [r7, #13]
 8000bc2:	7b7b      	ldrb	r3, [r7, #13]
 8000bc4:	2b07      	cmp	r3, #7
 8000bc6:	d9e9      	bls.n	8000b9c <SIGMA_Xmodem_Calc_crc+0x34>
    while (length)
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1d5      	bne.n	8000b7a <SIGMA_Xmodem_Calc_crc+0x12>
            }
        }
    }
    return crc;
 8000bce:	89fb      	ldrh	r3, [r7, #14]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SIGMA_Xmodem_Handle_Packet>:
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status SIGMA_Xmodem_Handle_Packet(uint8_t header)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4602      	mov	r2, r0
 8000be6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000bea:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000bee:	701a      	strb	r2, [r3, #0]
  xmodem_status status = X_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  uint16_t size = 0u;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
  uint8_t received_packet_data[X_PACKET_1024_SIZE];
  uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

  /* Get the size of the data. */
  if (X_SOH == header)
 8000bfc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000c00:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d103      	bne.n	8000c12 <SIGMA_Xmodem_Handle_Packet+0x36>
  {
    size = X_PACKET_128_SIZE;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000c10:	e00e      	b.n	8000c30 <SIGMA_Xmodem_Handle_Packet+0x54>
  }
  else if (X_STX == header)
 8000c12:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000c16:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d104      	bne.n	8000c2a <SIGMA_Xmodem_Handle_Packet+0x4e>
  {
    size = X_PACKET_1024_SIZE;
 8000c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c24:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000c28:	e002      	b.n	8000c30 <SIGMA_Xmodem_Handle_Packet+0x54>
  }
  else
  {
    /* Wrong header type. This shoudn't be possible... */
    status |= X_ERROR;
 8000c2a:	23ff      	movs	r3, #255	; 0xff
 8000c2c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  }

  uart_status comm_status = UART_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  /* Get the packet number, data and CRC from UART. */
  comm_status |= SIGMA_Uart_Receive(&received_packet_number[0u], X_PACKET_NUMBER_SIZE);
 8000c36:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe9b 	bl	8000978 <SIGMA_Uart_Receive>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  comm_status |= SIGMA_Uart_Receive(&received_packet_data[0u], size);
 8000c50:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fe8c 	bl	8000978 <SIGMA_Uart_Receive>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  comm_status |= SIGMA_Uart_Receive(&received_packet_crc[0u], X_PACKET_CRC_SIZE);
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2102      	movs	r1, #2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fe7f 	bl	8000978 <SIGMA_Uart_Receive>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000c82:	4313      	orrs	r3, r2
 8000c84:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  /* Merge the two bytes of CRC. */
  uint16_t crc_received = ((uint16_t)received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
 8000c88:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000c8c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000c9a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
  /* We calculate it too. */
  uint16_t crc_calculated = SIGMA_Xmodem_Calc_crc(&received_packet_data[0u], size);
 8000caa:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff57 	bl	8000b68 <SIGMA_Xmodem_Calc_crc>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e

  /* Communication error. */
  if (UART_OK != comm_status)
 8000cc0:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <SIGMA_Xmodem_Handle_Packet+0xf8>
  {
    status |= X_ERROR_UART;
 8000cc8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  }

  /* If it is the first packet, then erase the memory. */
  if ((X_OK == status) && (false == x_first_packet_received))
 8000cd4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d113      	bne.n	8000d04 <SIGMA_Xmodem_Handle_Packet+0x128>
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <SIGMA_Xmodem_Handle_Packet+0x1d8>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10f      	bne.n	8000d04 <SIGMA_Xmodem_Handle_Packet+0x128>
  {
    if (HAL_OK == SIGMA_Iflash_Erase(FLASH_APP_START_ADDRESS))
 8000ce4:	4834      	ldr	r0, [pc, #208]	; (8000db8 <SIGMA_Xmodem_Handle_Packet+0x1dc>)
 8000ce6:	f7ff fc8d 	bl	8000604 <SIGMA_Iflash_Erase>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d103      	bne.n	8000cf8 <SIGMA_Xmodem_Handle_Packet+0x11c>
    {
      x_first_packet_received = true;
 8000cf0:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <SIGMA_Xmodem_Handle_Packet+0x1d8>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e005      	b.n	8000d04 <SIGMA_Xmodem_Handle_Packet+0x128>
    }
    else
    {
      status |= X_ERROR_FLASH;
 8000cf8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
  }

  /* Error handling and flashing. */
  if (X_OK == status)
 8000d04:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d125      	bne.n	8000d58 <SIGMA_Xmodem_Handle_Packet+0x17c>
  {
    if (xmodem_packet_number != received_packet_number[0u])
 8000d0c:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <SIGMA_Xmodem_Handle_Packet+0x1e0>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d005      	beq.n	8000d24 <SIGMA_Xmodem_Handle_Packet+0x148>
    {
      /* Packet number counter mismatch. */
      status |= X_ERROR_NUMBER;
 8000d18:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
    if (255u != (received_packet_number[X_PACKET_NUMBER_INDEX] + received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
 8000d24:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8000d2e:	4413      	add	r3, r2
 8000d30:	2bff      	cmp	r3, #255	; 0xff
 8000d32:	d005      	beq.n	8000d40 <SIGMA_Xmodem_Handle_Packet+0x164>
    {
      /* The sum of the packet number and packet number complement aren't 255. */
      /* The sum always has to be 255. */
      status |= X_ERROR_NUMBER;
 8000d34:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
    if (crc_calculated != crc_received)
 8000d40:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000d44:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	; 0x410
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d005      	beq.n	8000d58 <SIGMA_Xmodem_Handle_Packet+0x17c>
    {
      /* The calculated and received CRC are different. */
      status |= X_ERROR_CRC;
 8000d4c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
  }

    /* Do the actual flashing (if there weren't any errors). */
    if ((X_OK == status) && (HAL_OK != SIGMA_Iflash_Write(xmodem_actual_flash_address, &received_packet_data[0u], (uint32_t)size)))
 8000d58:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d111      	bne.n	8000d84 <SIGMA_Xmodem_Handle_Packet+0x1a8>
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <SIGMA_Xmodem_Handle_Packet+0x1e4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000d68:	f107 010c 	add.w	r1, r7, #12
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fc9d 	bl	80006ac <SIGMA_Iflash_Write>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <SIGMA_Xmodem_Handle_Packet+0x1a8>
    {
      /* Flashing error. */
      status |= X_ERROR_FLASH;
 8000d78:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

  /* Raise the packet number and the address counters (if there weren't any errors). */
  if (X_OK == status)
 8000d84:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10c      	bne.n	8000da6 <SIGMA_Xmodem_Handle_Packet+0x1ca>
  {
    xmodem_packet_number++;
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <SIGMA_Xmodem_Handle_Packet+0x1e0>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <SIGMA_Xmodem_Handle_Packet+0x1e0>)
 8000d96:	701a      	strb	r2, [r3, #0]
    xmodem_actual_flash_address += size;
 8000d98:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <SIGMA_Xmodem_Handle_Packet+0x1e4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <SIGMA_Xmodem_Handle_Packet+0x1e4>)
 8000da4:	6013      	str	r3, [r2, #0]
  }

  return status;
 8000da6:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200000f4 	.word	0x200000f4
 8000db8:	08020000 	.word	0x08020000
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	200000f0 	.word	0x200000f0

08000dc4 <SIGMA_Xmodem_Error_Handler>:
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status SIGMA_Xmodem_Error_Handler(uint8_t *error_number, uint8_t max_error_number)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
  xmodem_status status = X_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
  /* Raise the error counter. */
  (*error_number)++;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	701a      	strb	r2, [r3, #0]
  /* If the counter reached the max value, then abort. */
  if ((*error_number) >= max_error_number)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d808      	bhi.n	8000dfc <SIGMA_Xmodem_Error_Handler+0x38>
  {
    /* Graceful abort. */
    (void)SIGMA_Uart_Transmit_ch(X_CAN);
 8000dea:	2018      	movs	r0, #24
 8000dec:	f7ff fe06 	bl	80009fc <SIGMA_Uart_Transmit_ch>
    (void)SIGMA_Uart_Transmit_ch(X_CAN);
 8000df0:	2018      	movs	r0, #24
 8000df2:	f7ff fe03 	bl	80009fc <SIGMA_Uart_Transmit_ch>
    status = X_ERROR;
 8000df6:	23ff      	movs	r3, #255	; 0xff
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e004      	b.n	8000e06 <SIGMA_Xmodem_Error_Handler+0x42>
  }
  /* Otherwise send a NAK for a repeat. */
  else
  {
    (void)SIGMA_Uart_Transmit_ch(X_NAK);
 8000dfc:	2015      	movs	r0, #21
 8000dfe:	f7ff fdfd 	bl	80009fc <SIGMA_Uart_Transmit_ch>
    status = X_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_MspInit+0x44>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_MspInit+0x44>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6613      	str	r3, [r2, #96]	; 0x60
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x44>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x44>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6593      	str	r3, [r2, #88]	; 0x58
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ae      	sub	sp, #184	; 0xb8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2294      	movs	r2, #148	; 0x94
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 f94d 	bl	8005118 <memset>
  if(huart->Instance==LPUART1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <HAL_UART_MspInit+0xc4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d145      	bne.n	8000f14 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e88:	2320      	movs	r3, #32
 8000e8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 ff75 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff fd64 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <HAL_UART_MspInit+0xc8>)
 8000ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <HAL_UART_MspInit+0xc8>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_UART_MspInit+0xc8>)
 8000eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0xc8>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0xc8>)
 8000ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0xc8>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000ed4:	f000 ff68 	bl	8001da8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ed8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_UART_MspInit+0xcc>)
 8000f00:	f000 fd68 	bl	80019d4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2042      	movs	r0, #66	; 0x42
 8000f0a:	f000 fa7c 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000f0e:	2042      	movs	r0, #66	; 0x42
 8000f10:	f000 fa93 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	37b8      	adds	r7, #184	; 0xb8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40008000 	.word	0x40008000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	42021800 	.word	0x42021800

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f94c 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <LPUART1_IRQHandler+0x10>)
 8000f82:	f002 fec9 	bl	8003d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000005c 	.word	0x2000005c

08000f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000fba:	4b4f      	ldr	r3, [pc, #316]	; (80010f8 <SystemCoreClockUpdate+0x144>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <SystemCoreClockUpdate+0x144>)
 8000fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e005      	b.n	8000fe2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000fd6:	4b48      	ldr	r3, [pc, #288]	; (80010f8 <SystemCoreClockUpdate+0x144>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <SystemCoreClockUpdate+0x148>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fec:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <SystemCoreClockUpdate+0x144>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b0c      	cmp	r3, #12
 8000ff6:	d866      	bhi.n	80010c6 <SystemCoreClockUpdate+0x112>
 8000ff8:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <SystemCoreClockUpdate+0x4c>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	08001035 	.word	0x08001035
 8001004:	080010c7 	.word	0x080010c7
 8001008:	080010c7 	.word	0x080010c7
 800100c:	080010c7 	.word	0x080010c7
 8001010:	0800103d 	.word	0x0800103d
 8001014:	080010c7 	.word	0x080010c7
 8001018:	080010c7 	.word	0x080010c7
 800101c:	080010c7 	.word	0x080010c7
 8001020:	08001045 	.word	0x08001045
 8001024:	080010c7 	.word	0x080010c7
 8001028:	080010c7 	.word	0x080010c7
 800102c:	080010c7 	.word	0x080010c7
 8001030:	0800104d 	.word	0x0800104d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001034:	4a32      	ldr	r2, [pc, #200]	; (8001100 <SystemCoreClockUpdate+0x14c>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	6013      	str	r3, [r2, #0]
      break;
 800103a:	e048      	b.n	80010ce <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800103c:	4b30      	ldr	r3, [pc, #192]	; (8001100 <SystemCoreClockUpdate+0x14c>)
 800103e:	4a31      	ldr	r2, [pc, #196]	; (8001104 <SystemCoreClockUpdate+0x150>)
 8001040:	601a      	str	r2, [r3, #0]
      break;
 8001042:	e044      	b.n	80010ce <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <SystemCoreClockUpdate+0x14c>)
 8001046:	4a30      	ldr	r2, [pc, #192]	; (8001108 <SystemCoreClockUpdate+0x154>)
 8001048:	601a      	str	r2, [r3, #0]
      break;
 800104a:	e040      	b.n	80010ce <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <SystemCoreClockUpdate+0x144>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <SystemCoreClockUpdate+0x144>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	3301      	adds	r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d003      	beq.n	8001072 <SystemCoreClockUpdate+0xbe>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d006      	beq.n	800107e <SystemCoreClockUpdate+0xca>
 8001070:	e00b      	b.n	800108a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001072:	4a24      	ldr	r2, [pc, #144]	; (8001104 <SystemCoreClockUpdate+0x150>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	613b      	str	r3, [r7, #16]
          break;
 800107c:	e00b      	b.n	8001096 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800107e:	4a22      	ldr	r2, [pc, #136]	; (8001108 <SystemCoreClockUpdate+0x154>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	613b      	str	r3, [r7, #16]
          break;
 8001088:	e005      	b.n	8001096 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	613b      	str	r3, [r7, #16]
          break;
 8001094:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <SystemCoreClockUpdate+0x144>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <SystemCoreClockUpdate+0x144>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0e5b      	lsrs	r3, r3, #25
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	3301      	adds	r3, #1
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <SystemCoreClockUpdate+0x14c>)
 80010c2:	6013      	str	r3, [r2, #0]
      break;
 80010c4:	e003      	b.n	80010ce <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <SystemCoreClockUpdate+0x14c>)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	6013      	str	r3, [r2, #0]
      break;
 80010cc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SystemCoreClockUpdate+0x144>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <SystemCoreClockUpdate+0x158>)
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <SystemCoreClockUpdate+0x14c>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	4a05      	ldr	r2, [pc, #20]	; (8001100 <SystemCoreClockUpdate+0x14c>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000
 80010fc:	08005284 	.word	0x08005284
 8001100:	20000004 	.word	0x20000004
 8001104:	00f42400 	.word	0x00f42400
 8001108:	007a1200 	.word	0x007a1200
 800110c:	0800526c 	.word	0x0800526c

08001110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001114:	f7ff ff3c 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001118:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800111a:	e003      	b.n	8001124 <LoopCopyDataInit>

0800111c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800111e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001120:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001122:	3104      	adds	r1, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001124:	480a      	ldr	r0, [pc, #40]	; (8001150 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001128:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800112a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800112c:	d3f6      	bcc.n	800111c <CopyDataInit>
	ldr	r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001130:	e002      	b.n	8001138 <LoopFillZerobss>

08001132 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001132:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001134:	f842 3b04 	str.w	r3, [r2], #4

08001138 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LoopForever+0x16>)
	cmp	r2, r3
 800113a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800113c:	d3f9      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800113e:	f003 ffc7 	bl	80050d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001142:	f7ff fb1f 	bl	8000784 <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001148:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800114c:	080052fc 	.word	0x080052fc
	ldr	r0, =_sdata
 8001150:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001154:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 8001158:	2000002c 	.word	0x2000002c
	ldr	r3, = _ebss
 800115c:	200000fc 	.word	0x200000fc

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>

08001162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800116c:	2004      	movs	r0, #4
 800116e:	f000 f93f 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001172:	f7ff ff1f 	bl	8000fb4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f80e 	bl	8001198 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	e001      	b.n	800118c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001188:	f7ff fe42 	bl	8000e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118c:	79fb      	ldrb	r3, [r7, #7]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_InitTick+0x6c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d023      	beq.n	80011f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_InitTick+0x70>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_InitTick+0x6c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f947 	bl	8001456 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10f      	bne.n	80011ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b07      	cmp	r3, #7
 80011d2:	d809      	bhi.n	80011e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f913 	bl	8001406 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_InitTick+0x74>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e007      	b.n	80011f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e004      	b.n	80011f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e001      	b.n	80011f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000000c 	.word	0x2000000c
 8001208:	20000004 	.word	0x20000004
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2000000c 	.word	0x2000000c
 8001234:	200000f8 	.word	0x200000f8

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200000f8 	.word	0x200000f8

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0152      	lsls	r2, r2, #5
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0152      	lsls	r2, r2, #5
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b03      	cmp	r3, #3
 8001360:	bf28      	it	cs
 8001362:	2303      	movcs	r3, #3
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3303      	adds	r3, #3
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b04      	subs	r3, #4
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	2107      	movs	r1, #7
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff40 	bl	8001298 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff33 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa4 	bl	80013ac <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d008      	beq.n	8001498 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2204      	movs	r2, #4
 800148a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e040      	b.n	800151a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 020e 	bic.w	r2, r2, #14
 80014a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	f003 021c 	and.w	r2, r3, #28
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d4:	2101      	movs	r1, #1
 80014d6:	fa01 f202 	lsl.w	r2, r1, r2
 80014da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00c      	beq.n	8001508 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001506:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d005      	beq.n	800154a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2204      	movs	r2, #4
 8001542:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e047      	b.n	80015da <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 020e 	bic.w	r2, r2, #14
 8001558:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 021c 	and.w	r2, r3, #28
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	2101      	movs	r1, #1
 8001588:	fa01 f202 	lsl.w	r2, r1, r2
 800158c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001596:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80015b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	4798      	blx	r3
    }
  }
  return status;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_FLASH_Program>:
  *                This parameter is the data for the double word program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	e9c7 2300 	strd	r2, r3, [r7]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_FLASH_Program+0x7c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_FLASH_Program+0x1a>
 8001612:	2302      	movs	r3, #2
 8001614:	e02c      	b.n	8001670 <HAL_FLASH_Program+0x74>
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_FLASH_Program+0x7c>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_FLASH_Program+0x7c>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001626:	f000 f867 	bl	80016f8 <FLASH_WaitForLastOperation>
 800162a:	4603      	mov	r3, r0
 800162c:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d119      	bne.n	8001668 <HAL_FLASH_Program+0x6c>
  {
    pFlash.ProcedureOnGoing = TypeProgram;
 8001634:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_FLASH_Program+0x7c>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6093      	str	r3, [r2, #8]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_FLASH_Program+0x80>)
 800163c:	613b      	str	r3, [r7, #16]

    /* Program double-word (64-bit) at a specified address */
    FLASH_Program_DoubleWord(Address, Data);
 800163e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001642:	68b8      	ldr	r0, [r7, #8]
 8001644:	f000 f8a0 	bl	8001788 <FLASH_Program_DoubleWord>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800164c:	f000 f854 	bl	80016f8 <FLASH_WaitForLastOperation>
 8001650:	4603      	mov	r3, r0
 8001652:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <HAL_FLASH_Program+0x7c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001660:	43db      	mvns	r3, r3
 8001662:	401a      	ands	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_FLASH_Program+0x7c>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]

  return status;
 800166e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000010 	.word	0x20000010
 800167c:	40022028 	.word	0x40022028

08001680 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_FLASH_Unlock+0x38>)
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	2b00      	cmp	r3, #0
 8001690:	da0b      	bge.n	80016aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_FLASH_Unlock+0x38>)
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_FLASH_Unlock+0x3c>)
 8001696:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_FLASH_Unlock+0x38>)
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_FLASH_Unlock+0x40>)
 800169c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_FLASH_Unlock+0x38>)
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da01      	bge.n	80016aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif

  return status;
 80016aa:	79fb      	ldrb	r3, [r7, #7]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40022000 	.word	0x40022000
 80016bc:	45670123 	.word	0x45670123
 80016c0:	cdef89ab 	.word	0xcdef89ab

080016c4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_FLASH_Lock+0x30>)
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_FLASH_Lock+0x30>)
 80016d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016d8:	6293      	str	r3, [r2, #40]	; 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_FLASH_Lock+0x30>)
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	2b00      	cmp	r3, #0
 80016e0:	da01      	bge.n	80016e6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif

  return status;
 80016e6:	79fb      	ldrb	r3, [r7, #7]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40022000 	.word	0x40022000

080016f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8001700:	f7ff fd9a 	bl	8001238 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800170c:	e00b      	b.n	8001726 <FLASH_WaitForLastOperation+0x2e>
  {
    if(Timeout != HAL_MAX_DELAY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d007      	beq.n	8001726 <FLASH_WaitForLastOperation+0x2e>
    {
      if(HAL_GetTick() >= timeout)
 8001716:	f7ff fd8f 	bl	8001238 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	4293      	cmp	r3, r2
 8001720:	d801      	bhi.n	8001726 <FLASH_WaitForLastOperation+0x2e>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e025      	b.n	8001772 <FLASH_WaitForLastOperation+0x7a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <FLASH_WaitForLastOperation+0x84>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ed      	bne.n	800170e <FLASH_WaitForLastOperation+0x16>
      }
    }
  }
  
  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <FLASH_WaitForLastOperation+0x88>)
 8001734:	613b      	str	r3, [r7, #16]

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f242 03fa 	movw	r3, #8442	; 0x20fa
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */ 

  if(error != 0u)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00a      	beq.n	800175e <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <FLASH_WaitForLastOperation+0x8c>)
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <FLASH_WaitForLastOperation+0x8c>)
 8001752:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e009      	b.n	8001772 <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40022000 	.word	0x40022000
 8001780:	40022020 	.word	0x40022020
 8001784:	20000010 	.word	0x20000010

08001788 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	e9c7 2300 	strd	r2, r3, [r7]
  __IO uint32_t *reg;
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <FLASH_Program_DoubleWord+0x68>)
 8001796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001798:	f3ef 8310 	mrs	r3, PRIMASK
 800179c:	613b      	str	r3, [r7, #16]
  return(result);
 800179e:	693b      	ldr	r3, [r7, #16]

  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
 80017a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80017a2:	b672      	cpsid	i
}
 80017a4:	bf00      	nop
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	601a      	str	r2, [r3, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80017b8:	f3bf 8f6f 	isb	sy
}
 80017bc:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 80017be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	000a      	movs	r2, r1
 80017cc:	2300      	movs	r3, #0
 80017ce:	68f9      	ldr	r1, [r7, #12]
 80017d0:	3104      	adds	r1, #4
 80017d2:	4613      	mov	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f383 8810 	msr	PRIMASK, r3
}
 80017e0:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80017e2:	bf00      	nop
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40022028 	.word	0x40022028

080017f4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_FLASHEx_Erase+0xd8>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_FLASHEx_Erase+0x16>
 8001806:	2302      	movs	r3, #2
 8001808:	e05c      	b.n	80018c4 <HAL_FLASHEx_Erase+0xd0>
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_FLASHEx_Erase+0xd8>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_FLASHEx_Erase+0xd8>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181a:	f7ff ff6d 	bl	80016f8 <FLASH_WaitForLastOperation>
 800181e:	4603      	mov	r3, r0
 8001820:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d149      	bne.n	80018bc <HAL_FLASHEx_Erase+0xc8>
  {
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a27      	ldr	r2, [pc, #156]	; (80018cc <HAL_FLASHEx_Erase+0xd8>)
 800182e:	6093      	str	r3, [r2, #8]

    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_FLASHEx_Erase+0xdc>)
 8001832:	60fb      	str	r3, [r7, #12]

    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_FLASHEx_Erase+0xd8>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800183c:	f248 0204 	movw	r2, #32772	; 0x8004
 8001840:	4293      	cmp	r3, r2
 8001842:	d10b      	bne.n	800185c <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f843 	bl	80018d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800184e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001852:	f7ff ff51 	bl	80016f8 <FLASH_WaitForLastOperation>
 8001856:	4603      	mov	r3, r0
 8001858:	75fb      	strb	r3, [r7, #23]
 800185a:	e025      	b.n	80018a8 <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f04f 32ff 	mov.w	r2, #4294967295
 8001862:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	e015      	b.n	8001898 <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4619      	mov	r1, r3
 8001872:	6938      	ldr	r0, [r7, #16]
 8001874:	f000 f86a 	bl	800194c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800187c:	f7ff ff3c 	bl	80016f8 <FLASH_WaitForLastOperation>
 8001880:	4603      	mov	r3, r0
 8001882:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	601a      	str	r2, [r3, #0]
          break;
 8001890:	e00a      	b.n	80018a8 <HAL_FLASHEx_Erase+0xb4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	3301      	adds	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3e1      	bcc.n	800186c <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_FLASHEx_Erase+0xd8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_FLASHEx_Erase+0xd8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]

  return status;
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000010 	.word	0x20000010
 80018d0:	40022028 	.word	0x40022028

080018d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <FLASH_MassErase+0x70>)
 80018de:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <FLASH_MassErase+0x74>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d016      	beq.n	800191a <FLASH_MassErase+0x46>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <FLASH_MassErase+0x2e>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f043 0204 	orr.w	r2, r3, #4
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	601a      	str	r2, [r3, #0]
    }

    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00e      	beq.n	800192a <FLASH_MassErase+0x56>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e007      	b.n	800192a <FLASH_MassErase+0x56>
    }
  }
  else
  {
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	6013      	str	r3, [r2, #0]
  }

  /* Proceed to erase all sectors */
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40022028 	.word	0x40022028
 8001948:	40022000 	.word	0x40022000

0800194c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <FLASH_PageErase+0x80>)
 8001958:	60fb      	str	r3, [r7, #12]

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <FLASH_PageErase+0x84>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <FLASH_PageErase+0x28>
  {
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e011      	b.n	8001998 <FLASH_PageErase+0x4c>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <FLASH_PageErase+0x40>
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e005      	b.n	8001998 <FLASH_PageErase+0x4c>
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	601a      	str	r2, [r3, #0]
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80019a0:	f023 0302 	bic.w	r3, r3, #2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	00d2      	lsls	r2, r2, #3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	f043 0202 	orr.w	r2, r3, #2
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	601a      	str	r2, [r3, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40022028 	.word	0x40022028
 80019d0:	40022000 	.word	0x40022000

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019e2:	e158      	b.n	8001c96 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 814a 	beq.w	8001c90 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d005      	beq.n	8001a14 <HAL_GPIO_Init+0x40>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d130      	bne.n	8001a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 0201 	and.w	r2, r3, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d017      	beq.n	8001ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d123      	bne.n	8001b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	6939      	ldr	r1, [r7, #16]
 8001b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0203 	and.w	r2, r3, #3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80a4 	beq.w	8001c90 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001b48:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3318      	adds	r3, #24
 8001b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_GPIO_Init+0x2e4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d025      	beq.n	8001bc0 <HAL_GPIO_Init+0x1ec>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a51      	ldr	r2, [pc, #324]	; (8001cbc <HAL_GPIO_Init+0x2e8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d01f      	beq.n	8001bbc <HAL_GPIO_Init+0x1e8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_GPIO_Init+0x2ec>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d019      	beq.n	8001bb8 <HAL_GPIO_Init+0x1e4>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a4f      	ldr	r2, [pc, #316]	; (8001cc4 <HAL_GPIO_Init+0x2f0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_GPIO_Init+0x2f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1dc>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_GPIO_Init+0x2f8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1d8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_GPIO_Init+0x2fc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1d4>
 8001ba4:	2306      	movs	r3, #6
 8001ba6:	e00c      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001ba8:	2307      	movs	r3, #7
 8001baa:	e00a      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bac:	2305      	movs	r3, #5
 8001bae:	e008      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	e006      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e004      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e002      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	f002 0203 	and.w	r2, r2, #3
 8001bc8:	00d2      	lsls	r2, r2, #3
 8001bca:	4093      	lsls	r3, r2
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001bd2:	4938      	ldr	r1, [pc, #224]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3318      	adds	r3, #24
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c04:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c2e:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c5a:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f47f ae9f 	bne.w	80019e4 <HAL_GPIO_Init+0x10>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	371c      	adds	r7, #28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	4002f400 	.word	0x4002f400
 8001cb8:	42020000 	.word	0x42020000
 8001cbc:	42020400 	.word	0x42020400
 8001cc0:	42020800 	.word	0x42020800
 8001cc4:	42020c00 	.word	0x42020c00
 8001cc8:	42021000 	.word	0x42021000
 8001ccc:	42021400 	.word	0x42021400
 8001cd0:	42021800 	.word	0x42021800

08001cd4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_PWREx_GetVoltageRange+0x18>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40007000 	.word	0x40007000

08001cf0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d00:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001d02:	f000 f861 	bl	8001dc8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d0c:	d101      	bne.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e03e      	b.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1e:	d101      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e035      	b.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d101      	bne.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e02f      	b.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001d38:	4917      	ldr	r1, [pc, #92]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	09db      	lsrs	r3, r3, #7
 8001d4e:	2232      	movs	r2, #50	; 0x32
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	08db      	lsrs	r3, r3, #3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d60:	e002      	b.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d74:	d102      	bne.n	8001d7c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f2      	bne.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d88:	d101      	bne.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e000      	b.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	0a7c5ac5 	.word	0x0a7c5ac5
 8001da4:	cccccccd 	.word	0xcccccccd

08001da8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db6:	6053      	str	r3, [r2, #4]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40007000 	.word	0x40007000

08001dc8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	e00a      	b.n	8001dfc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d103      	bne.n	8001df8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	e001      	b.n	8001dfc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001dfc:	687b      	ldr	r3, [r7, #4]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40007000 	.word	0x40007000

08001e10 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f000 bcc2 	b.w	80027a8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e24:	4b99      	ldr	r3, [pc, #612]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e2e:	4b97      	ldr	r3, [pc, #604]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80e9 	beq.w	8002018 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_RCC_OscConfig+0x4a>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	f040 8083 	bne.w	8001f5a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d17f      	bne.n	8001f5a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5a:	4b8c      	ldr	r3, [pc, #560]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_RCC_OscConfig+0x64>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f000 bc9a 	b.w	80027a8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e78:	4b84      	ldr	r3, [pc, #528]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_RCC_OscConfig+0x7e>
 8001e84:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8c:	e005      	b.n	8001e9a <HAL_RCC_OscConfig+0x8a>
 8001e8e:	4b7f      	ldr	r3, [pc, #508]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d224      	bcs.n	8001ee8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fe9c 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f000 bc7a 	b.w	80027a8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a74      	ldr	r2, [pc, #464]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b72      	ldr	r3, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	496f      	ldr	r1, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed2:	4b6e      	ldr	r3, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	496a      	ldr	r1, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
 8001ee6:	e026      	b.n	8001f36 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a67      	ldr	r2, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	4962      	ldr	r1, [pc, #392]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f06:	4b61      	ldr	r3, [pc, #388]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	495d      	ldr	r1, [pc, #372]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10a      	bne.n	8001f36 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fe5b 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	f000 bc39 	b.w	80027a8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f36:	f000 fe17 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4a54      	ldr	r2, [pc, #336]	; (8002090 <HAL_RCC_OscConfig+0x280>)
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f40:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_RCC_OscConfig+0x284>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f927 	bl	8001198 <HAL_InitTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d060      	beq.n	8002016 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	f000 bc27 	b.w	80027a8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d039      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a49      	ldr	r2, [pc, #292]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f963 	bl	8001238 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f74:	e00f      	b.n	8001f96 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f76:	f7ff f95f 	bl	8001238 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d908      	bls.n	8001f96 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f84:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	f000 bc09 	b.w	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0e9      	beq.n	8001f76 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a39      	ldr	r2, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	4934      	ldr	r1, [pc, #208]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	492f      	ldr	r1, [pc, #188]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
 8001fd4:	e020      	b.n	8002018 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2c      	ldr	r2, [pc, #176]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff f929 	bl	8001238 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fe8:	e00e      	b.n	8002008 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fea:	f7ff f925 	bl	8001238 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d907      	bls.n	8002008 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e3cf      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ea      	bne.n	8001fea <HAL_RCC_OscConfig+0x1da>
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002016:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d07e      	beq.n	8002122 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b08      	cmp	r3, #8
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x226>
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d10e      	bne.n	800204e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d10b      	bne.n	800204e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d06e      	beq.n	8002120 <HAL_RCC_OscConfig+0x310>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d16a      	bne.n	8002120 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e3ac      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x256>
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e024      	b.n	80020b0 <HAL_RCC_OscConfig+0x2a0>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206e:	d113      	bne.n	8002098 <HAL_RCC_OscConfig+0x288>
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a05      	ldr	r2, [pc, #20]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8002076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a02      	ldr	r2, [pc, #8]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8002082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e012      	b.n	80020b0 <HAL_RCC_OscConfig+0x2a0>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	20000004 	.word	0x20000004
 8002094:	20000008 	.word	0x20000008
 8002098:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a8a      	ldr	r2, [pc, #552]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a87      	ldr	r2, [pc, #540]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d019      	beq.n	80020ec <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f8be 	bl	8001238 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020be:	e00e      	b.n	80020de <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff f8ba 	bl	8001238 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d907      	bls.n	80020de <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ce:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e364      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020de:	4b7a      	ldr	r3, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ea      	beq.n	80020c0 <HAL_RCC_OscConfig+0x2b0>
 80020ea:	e01a      	b.n	8002122 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff f8a4 	bl	8001238 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f2:	e00e      	b.n	8002112 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff f8a0 	bl	8001238 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d907      	bls.n	8002112 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002102:	4b71      	ldr	r3, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e34a      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002112:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ea      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2e4>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d06c      	beq.n	8002208 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x330>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d119      	bne.n	800216e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d116      	bne.n	800216e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002140:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x348>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e327      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	4958      	ldr	r1, [pc, #352]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216c:	e04c      	b.n	8002208 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d029      	beq.n	80021ca <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002176:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a53      	ldr	r2, [pc, #332]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff f859 	bl	8001238 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002188:	e00e      	b.n	80021a8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff f855 	bl	8001238 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d907      	bls.n	80021a8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002198:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e2ff      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a8:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ea      	beq.n	800218a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	061b      	lsls	r3, r3, #24
 80021c2:	4941      	ldr	r1, [pc, #260]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
 80021c8:	e01e      	b.n	8002208 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3e      	ldr	r2, [pc, #248]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7ff f82f 	bl	8001238 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021dc:	e00e      	b.n	80021fc <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff f82b 	bl	8001238 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d907      	bls.n	80021fc <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e2d5      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ea      	bne.n	80021de <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d062      	beq.n	80022da <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d038      	beq.n	800228e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d108      	bne.n	8002236 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222a:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800222c:	f023 0310 	bic.w	r3, r3, #16
 8002230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002234:	e007      	b.n	8002246 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800223e:	f043 0310 	orr.w	r3, r3, #16
 8002242:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224c:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7fe ffef 	bl	8001238 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225c:	e00f      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe ffeb 	bl	8001238 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b07      	cmp	r3, #7
 800226a:	d908      	bls.n	800227e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e294      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0e8      	beq.n	800225e <HAL_RCC_OscConfig+0x44e>
 800228c:	e025      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002294:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7fe ffcb 	bl	8001238 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a4:	e012      	b.n	80022cc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a6:	f7fe ffc7 	bl	8001238 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b07      	cmp	r3, #7
 80022b2:	d90b      	bls.n	80022cc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e270      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022cc:	4ba8      	ldr	r3, [pc, #672]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80022ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e5      	bne.n	80022a6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 812d 	beq.w	8002542 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e8:	2300      	movs	r3, #0
 80022ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022ec:	4ba0      	ldr	r3, [pc, #640]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b9d      	ldr	r3, [pc, #628]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	4a9c      	ldr	r2, [pc, #624]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002302:	6593      	str	r3, [r2, #88]	; 0x58
 8002304:	4b9a      	ldr	r3, [pc, #616]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002310:	2301      	movs	r3, #1
 8002312:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002314:	4b97      	ldr	r3, [pc, #604]	; (8002574 <HAL_RCC_OscConfig+0x764>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11e      	bne.n	800235e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002320:	4b94      	ldr	r3, [pc, #592]	; (8002574 <HAL_RCC_OscConfig+0x764>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a93      	ldr	r2, [pc, #588]	; (8002574 <HAL_RCC_OscConfig+0x764>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232c:	f7fe ff84 	bl	8001238 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002332:	e00e      	b.n	8002352 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002334:	f7fe ff80 	bl	8001238 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d907      	bls.n	8002352 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002342:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <HAL_RCC_OscConfig+0x764>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e22a      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002352:	4b88      	ldr	r3, [pc, #544]	; (8002574 <HAL_RCC_OscConfig+0x764>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ea      	beq.n	8002334 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01f      	beq.n	80023aa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d010      	beq.n	8002398 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002376:	4b7e      	ldr	r3, [pc, #504]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	4a7c      	ldr	r2, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002386:	4b7a      	ldr	r3, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	4a78      	ldr	r2, [pc, #480]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002396:	e018      	b.n	80023ca <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002398:	4b75      	ldr	r3, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a74      	ldr	r2, [pc, #464]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a8:	e00f      	b.n	80023ca <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023aa:	4b71      	ldr	r3, [pc, #452]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	4a6f      	ldr	r2, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023ba:	4b6d      	ldr	r3, [pc, #436]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	4a6b      	ldr	r2, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d068      	beq.n	80024a4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe ff31 	bl	8001238 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d8:	e011      	b.n	80023fe <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe ff2d 	bl	8001238 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d908      	bls.n	80023fe <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ec:	4b60      	ldr	r3, [pc, #384]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1d4      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0e6      	beq.n	80023da <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002414:	2b00      	cmp	r3, #0
 8002416:	d022      	beq.n	800245e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002418:	4b55      	ldr	r3, [pc, #340]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a54      	ldr	r2, [pc, #336]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002428:	e011      	b.n	800244e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe ff05 	bl	8001238 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d908      	bls.n	800244e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e1ac      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800244e:	4b48      	ldr	r3, [pc, #288]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0e6      	beq.n	800242a <HAL_RCC_OscConfig+0x61a>
 800245c:	e068      	b.n	8002530 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800245e:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	4a42      	ldr	r2, [pc, #264]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800246a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800246e:	e011      	b.n	8002494 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7fe fee2 	bl	8001238 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d908      	bls.n	8002494 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e189      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1e6      	bne.n	8002470 <HAL_RCC_OscConfig+0x660>
 80024a2:	e045      	b.n	8002530 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fec8 	bl	8001238 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024aa:	e011      	b.n	80024d0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fec4 	bl	8001238 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d908      	bls.n	80024d0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e16b      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1e6      	bne.n	80024ac <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d021      	beq.n	8002530 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80024ec:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 80024f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024fc:	e011      	b.n	8002522 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fe9b 	bl	8001238 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d908      	bls.n	8002522 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002510:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e142      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e6      	bne.n	80024fe <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002530:	7ffb      	ldrb	r3, [r7, #31]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d04f      	beq.n	80025ee <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	2b00      	cmp	r3, #0
 8002554:	d028      	beq.n	80025a8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 8002558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_RCC_OscConfig+0x760>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7fe fe67 	bl	8001238 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x788>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002578:	f7fe fe5e 	bl	8001238 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d908      	bls.n	8002598 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002586:	4b8a      	ldr	r3, [pc, #552]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e107      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002598:	4b85      	ldr	r3, [pc, #532]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 800259a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0e8      	beq.n	8002578 <HAL_RCC_OscConfig+0x768>
 80025a6:	e022      	b.n	80025ee <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025a8:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80025aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ae:	4a80      	ldr	r2, [pc, #512]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe fe3e 	bl	8001238 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025be:	e00f      	b.n	80025e0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c0:	f7fe fe3a 	bl	8001238 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d908      	bls.n	80025e0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025ce:	4b78      	ldr	r3, [pc, #480]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80025d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0e3      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025e0:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80025e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e8      	bne.n	80025c0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80d7 	beq.w	80027a6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b0c      	cmp	r3, #12
 8002602:	f000 8091 	beq.w	8002728 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	2b02      	cmp	r3, #2
 800260c:	d166      	bne.n	80026dc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a67      	ldr	r2, [pc, #412]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002614:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe fe0d 	bl	8001238 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002620:	e00e      	b.n	8002640 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fe09 	bl	8001238 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d907      	bls.n	8002640 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002630:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0b3      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002640:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ea      	bne.n	8002622 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264c:	4b58      	ldr	r3, [pc, #352]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b58      	ldr	r3, [pc, #352]	; (80027b4 <HAL_RCC_OscConfig+0x9a4>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800265c:	3a01      	subs	r2, #1
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002666:	0212      	lsls	r2, r2, #8
 8002668:	4311      	orrs	r1, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800266e:	0852      	lsrs	r2, r2, #1
 8002670:	3a01      	subs	r2, #1
 8002672:	0552      	lsls	r2, r2, #21
 8002674:	4311      	orrs	r1, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800267a:	0852      	lsrs	r2, r2, #1
 800267c:	3a01      	subs	r2, #1
 800267e:	0652      	lsls	r2, r2, #25
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002686:	06d2      	lsls	r2, r2, #27
 8002688:	430a      	orrs	r2, r1
 800268a:	4949      	ldr	r1, [pc, #292]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a46      	ldr	r2, [pc, #280]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800269c:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a43      	ldr	r2, [pc, #268]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80026a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fdc6 	bl	8001238 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ae:	e00e      	b.n	80026ce <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fdc2 	bl	8001238 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d907      	bls.n	80026ce <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e06c      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ea      	beq.n	80026b0 <HAL_RCC_OscConfig+0x8a0>
 80026da:	e064      	b.n	80027a6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a33      	ldr	r2, [pc, #204]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 80026e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fda6 	bl	8001238 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ee:	e00e      	b.n	800270e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fda2 	bl	8001238 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d907      	bls.n	800270e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04c      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ea      	bne.n	80026f0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	4924      	ldr	r1, [pc, #144]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002720:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <HAL_RCC_OscConfig+0x9a8>)
 8002722:	4013      	ands	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]
 8002726:	e03e      	b.n	80027a6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e039      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_RCC_OscConfig+0x9a0>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0203 	and.w	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	429a      	cmp	r2, r3
 8002746:	d12c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	3b01      	subs	r3, #1
 8002754:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d123      	bne.n	80027a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d11b      	bne.n	80027a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d113      	bne.n	80027a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	3b01      	subs	r3, #1
 8002788:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	019f800c 	.word	0x019f800c
 80027b8:	feeefffc 	.word	0xfeeefffc

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e11c      	b.n	8002a0e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b90      	ldr	r3, [pc, #576]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b8d      	ldr	r3, [pc, #564]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	498b      	ldr	r1, [pc, #556]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e104      	b.n	8002a0e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d010      	beq.n	8002832 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281c:	429a      	cmp	r2, r3
 800281e:	d908      	bls.n	8002832 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	497b      	ldr	r1, [pc, #492]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8085 	beq.w	800294a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d11f      	bne.n	8002888 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002848:	4b74      	ldr	r3, [pc, #464]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0da      	b.n	8002a0e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002858:	f000 fa26 	bl	8002ca8 <RCC_GetSysClockFreqFromPLLSource>
 800285c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4a6f      	ldr	r2, [pc, #444]	; (8002a20 <HAL_RCC_ClockConfig+0x264>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d947      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002866:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d141      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002872:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800287a:	4a68      	ldr	r2, [pc, #416]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800287c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002880:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e036      	b.n	80028f6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002890:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d115      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b6      	b.n	8002a0e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a8:	4b5c      	ldr	r3, [pc, #368]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0aa      	b.n	8002a0e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b8:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0a2      	b.n	8002a0e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028c8:	f000 f8b0 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4a53      	ldr	r2, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x264>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d90f      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028e2:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ea:	4a4c      	ldr	r2, [pc, #304]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80028ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4946      	ldr	r1, [pc, #280]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fc96 	bl	8001238 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e013      	b.n	8002938 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fc92 	bl	8001238 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d90a      	bls.n	8002938 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e06a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002938:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 020c 	and.w	r2, r3, #12
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	429a      	cmp	r2, r3
 8002948:	d1e2      	bne.n	8002910 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d105      	bne.n	800295c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a31      	ldr	r2, [pc, #196]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002974:	429a      	cmp	r2, r3
 8002976:	d208      	bcs.n	800298a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4925      	ldr	r1, [pc, #148]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d210      	bcs.n	80029ba <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 020f 	bic.w	r2, r3, #15
 80029a0:	491d      	ldr	r1, [pc, #116]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e029      	b.n	8002a0e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4912      	ldr	r1, [pc, #72]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d009      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	490a      	ldr	r1, [pc, #40]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029f8:	f000 f8b6 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x268>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fbc6 	bl	8001198 <HAL_InitTick>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	04c4b400 	.word	0x04c4b400
 8002a24:	20000004 	.word	0x20000004
 8002a28:	20000008 	.word	0x20000008

08002a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a44:	4b44      	ldr	r3, [pc, #272]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x34>
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d121      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d11e      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a60:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e005      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002a88:	4a34      	ldr	r2, [pc, #208]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x130>)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x134>)
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e004      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ab2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d146      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3301      	adds	r3, #1
 8002ad0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xb4>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d00d      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0xce>
 8002ade:	e019      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002aea:	68d2      	ldr	r2, [r2, #12]
 8002aec:	0a12      	lsrs	r2, r2, #8
 8002aee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
        break;
 8002af8:	e019      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x138>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b04:	68d2      	ldr	r2, [r2, #12]
 8002b06:	0a12      	lsrs	r2, r2, #8
 8002b08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
        break;
 8002b12:	e00c      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b1e:	68d2      	ldr	r2, [r2, #12]
 8002b20:	0a12      	lsrs	r2, r2, #8
 8002b22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	617b      	str	r3, [r7, #20]
        break;
 8002b2c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	0e5b      	lsrs	r3, r3, #25
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b48:	69bb      	ldr	r3, [r7, #24]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	08005284 	.word	0x08005284
 8002b60:	00f42400 	.word	0x00f42400
 8002b64:	007a1200 	.word	0x007a1200

08002b68 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002b6c:	f7ff ff5e 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetHCLKFreq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetHCLKFreq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	0800526c 	.word	0x0800526c

08002b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b94:	f7ff ffe8 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	0800527c 	.word	0x0800527c

08002bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bbc:	f7ff ffd4 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	0adb      	lsrs	r3, r3, #11
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	0800527c 	.word	0x0800527c

08002be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf8:	f7ff f86c 	bl	8001cd4 <HAL_PWREx_GetVoltageRange>
 8002bfc:	6138      	str	r0, [r7, #16]
 8002bfe:	e014      	b.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f85c 	bl	8001cd4 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c36:	d10b      	bne.n	8002c50 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d919      	bls.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2ba0      	cmp	r3, #160	; 0xa0
 8002c42:	d902      	bls.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c44:	2302      	movs	r3, #2
 8002c46:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002c48:	e013      	b.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002c4e:	e010      	b.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d902      	bls.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c56:	2303      	movs	r3, #3
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e00a      	b.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d102      	bne.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c62:	2302      	movs	r3, #2
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e004      	b.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b70      	cmp	r3, #112	; 0x70
 8002c6c:	d101      	bne.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 020f 	bic.w	r2, r3, #15
 8002c7a:	490a      	ldr	r1, [pc, #40]	; (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40022000 	.word	0x40022000

08002ca8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d015      	beq.n	8002cf8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d839      	bhi.n	8002d46 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d01c      	beq.n	8002d12 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d133      	bne.n	8002d46 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cde:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002ce8:	68d2      	ldr	r2, [r2, #12]
 8002cea:	0a12      	lsrs	r2, r2, #8
 8002cec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	613b      	str	r3, [r7, #16]
      break;
 8002cf6:	e029      	b.n	8002d4c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cf8:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d02:	68d2      	ldr	r2, [r2, #12]
 8002d04:	0a12      	lsrs	r2, r2, #8
 8002d06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	613b      	str	r3, [r7, #16]
      break;
 8002d10:	e01c      	b.n	8002d4c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e005      	b.n	8002d3a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8002d3a:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	613b      	str	r3, [r7, #16]
        break;
 8002d44:	e002      	b.n	8002d4c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
      break;
 8002d4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0e5b      	lsrs	r3, r3, #25
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	3301      	adds	r3, #1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d66:	683b      	ldr	r3, [r7, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40021000 	.word	0x40021000
 8002d78:	00f42400 	.word	0x00f42400
 8002d7c:	007a1200 	.word	0x007a1200
 8002d80:	08005284 	.word	0x08005284

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d040      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d02a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d825      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dac:	2b60      	cmp	r3, #96	; 0x60
 8002dae:	d026      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002db0:	2b60      	cmp	r3, #96	; 0x60
 8002db2:	d821      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d006      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d81d      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002dc4:	e018      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dc6:	4b8f      	ldr	r3, [pc, #572]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4a8e      	ldr	r2, [pc, #568]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dd2:	e015      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fb56 	bl	800348c <RCCEx_PLLSAI1_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002de4:	e00c      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3320      	adds	r3, #32
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fc33 	bl	8003658 <RCCEx_PLLSAI2_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	77fb      	strb	r3, [r7, #31]
        break;
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8002dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e00:	7ffb      	ldrb	r3, [r7, #31]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e06:	4b7f      	ldr	r3, [pc, #508]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e0c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e14:	497b      	ldr	r1, [pc, #492]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e1c:	e001      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d047      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d030      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d82a      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e42:	d02a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e48:	d824      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e54:	d81e      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e60:	e018      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e62:	4b68      	ldr	r3, [pc, #416]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a67      	ldr	r2, [pc, #412]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002e6e:	e015      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fb08 	bl	800348c <RCCEx_PLLSAI1_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002e80:	e00c      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3320      	adds	r3, #32
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fbe5 	bl	8003658 <RCCEx_PLLSAI2_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	77fb      	strb	r3, [r7, #31]
        break;
 8002e98:	e000      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8002e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ea2:	4b58      	ldr	r3, [pc, #352]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4954      	ldr	r1, [pc, #336]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002eb8:	e001      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80ab 	beq.w	8003022 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed0:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10d      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b49      	ldr	r3, [pc, #292]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee0:	4a48      	ldr	r2, [pc, #288]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee8:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef8:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a42      	ldr	r2, [pc, #264]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f04:	f7fe f998 	bl	8001238 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0a:	e00f      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0c:	f7fe f994 	bl	8001238 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d908      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8002f2a:	e006      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f2c:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0e9      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002f38:	e000      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8002f3a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8002f3c:	7ffb      	ldrb	r3, [r7, #31]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d164      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f42:	4b30      	ldr	r3, [pc, #192]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01f      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d019      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	4a24      	ldr	r2, [pc, #144]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	4a20      	ldr	r2, [pc, #128]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01f      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe f94b 	bl	8001238 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa4:	e012      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe f947 	bl	8001238 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d909      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8002fca:	e007      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0e5      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002fda:	e000      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8002fdc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe4:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ffc:	e008      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ffe:	7ffb      	ldrb	r3, [r7, #31]
 8003000:	77bb      	strb	r3, [r7, #30]
 8003002:	e005      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003004:	40021000 	.word	0x40021000
 8003008:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300c:	7ffb      	ldrb	r3, [r7, #31]
 800300e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d105      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003016:	4b9c      	ldr	r3, [pc, #624]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	4a9b      	ldr	r2, [pc, #620]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800301c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003020:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800302e:	4b96      	ldr	r3, [pc, #600]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f023 0203 	bic.w	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	4992      	ldr	r1, [pc, #584]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003050:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	f023 020c 	bic.w	r2, r3, #12
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	498a      	ldr	r1, [pc, #552]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003072:	4b85      	ldr	r3, [pc, #532]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003078:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	4981      	ldr	r1, [pc, #516]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003094:	4b7c      	ldr	r3, [pc, #496]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	4979      	ldr	r1, [pc, #484]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030b6:	4b74      	ldr	r3, [pc, #464]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	4970      	ldr	r1, [pc, #448]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030d8:	4b6b      	ldr	r3, [pc, #428]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e6:	4968      	ldr	r1, [pc, #416]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	495f      	ldr	r1, [pc, #380]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800311c:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	4957      	ldr	r1, [pc, #348]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800313e:	4b52      	ldr	r3, [pc, #328]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003144:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800314c:	494e      	ldr	r1, [pc, #312]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d031      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003168:	d00e      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800316a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800316e:	d814      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d015      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003178:	d10f      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800317a:	4b43      	ldr	r3, [pc, #268]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4a42      	ldr	r2, [pc, #264]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003184:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003186:	e00c      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f97c 	bl	800348c <RCCEx_PLLSAI1_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003198:	e003      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	77fb      	strb	r3, [r7, #31]
        break;
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80031a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a2:	7ffb      	ldrb	r3, [r7, #31]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031a8:	4b37      	ldr	r3, [pc, #220]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b6:	4934      	ldr	r1, [pc, #208]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031be:	e001      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7ffb      	ldrb	r3, [r7, #31]
 80031c2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d0:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	492a      	ldr	r1, [pc, #168]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031f2:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003200:	4921      	ldr	r1, [pc, #132]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003214:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	4919      	ldr	r1, [pc, #100]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003238:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800323c:	f023 0203 	bic.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	4910      	ldr	r1, [pc, #64]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02b      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	4908      	ldr	r1, [pc, #32]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003276:	d109      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a02      	ldr	r2, [pc, #8]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800327e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003282:	60d3      	str	r3, [r2, #12]
 8003284:	e014      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	2101      	movs	r1, #1
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f8f5 	bl	800348c <RCCEx_PLLSAI1_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80032a6:	7ffb      	ldrb	r3, [r7, #31]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80032ac:	7ffb      	ldrb	r3, [r7, #31]
 80032ae:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d04a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c4:	d108      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80032c6:	4b70      	ldr	r3, [pc, #448]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80032c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032cc:	4a6e      	ldr	r2, [pc, #440]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80032ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032d6:	e012      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80032d8:	4b6b      	ldr	r3, [pc, #428]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e6:	4968      	ldr	r1, [pc, #416]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032ee:	4b66      	ldr	r3, [pc, #408]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80032f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f4:	4a64      	ldr	r2, [pc, #400]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80032f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003306:	d10d      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	2101      	movs	r1, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f8bc 	bl	800348c <RCCEx_PLLSAI1_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003318:	7ffb      	ldrb	r3, [r7, #31]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d019      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	77bb      	strb	r3, [r7, #30]
 8003322:	e016      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800332c:	d106      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800332e:	4b56      	ldr	r3, [pc, #344]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	4a55      	ldr	r2, [pc, #340]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003338:	60d3      	str	r3, [r2, #12]
 800333a:	e00a      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003344:	d105      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003346:	4b50      	ldr	r3, [pc, #320]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d028      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800335e:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336c:	4946      	ldr	r1, [pc, #280]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800337c:	d106      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800337e:	4b42      	ldr	r3, [pc, #264]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a41      	ldr	r2, [pc, #260]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003388:	60d3      	str	r3, [r2, #12]
 800338a:	e011      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	2101      	movs	r1, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f875 	bl	800348c <RCCEx_PLLSAI1_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80033ac:	7ffb      	ldrb	r3, [r7, #31]
 80033ae:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01e      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033bc:	4b32      	ldr	r3, [pc, #200]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033cc:	492e      	ldr	r1, [pc, #184]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033de:	d10c      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	2102      	movs	r1, #2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f850 	bl	800348c <RCCEx_PLLSAI1_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80033f0:	7ffb      	ldrb	r3, [r7, #31]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80033f6:	7ffb      	ldrb	r3, [r7, #31]
 80033f8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003408:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800340c:	f023 0204 	bic.w	r2, r3, #4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003416:	491c      	ldr	r1, [pc, #112]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800342c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003430:	f023 0218 	bic.w	r2, r3, #24
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	4913      	ldr	r1, [pc, #76]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d017      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800345e:	490a      	ldr	r1, [pc, #40]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800346c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003470:	d105      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	4a04      	ldr	r2, [pc, #16]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800347e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000

0800348c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d018      	beq.n	80034d4 <RCCEx_PLLSAI1_Config+0x48>
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d81f      	bhi.n	80034e6 <RCCEx_PLLSAI1_Config+0x5a>
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d002      	beq.n	80034b0 <RCCEx_PLLSAI1_Config+0x24>
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d009      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0x36>
 80034ae:	e01a      	b.n	80034e6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034b0:	4b65      	ldr	r3, [pc, #404]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d117      	bne.n	80034ec <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e014      	b.n	80034ec <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034c2:	4b61      	ldr	r3, [pc, #388]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d110      	bne.n	80034f0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d2:	e00d      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80034d4:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e4:	e006      	b.n	80034f4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
      break;
 80034ea:	e004      	b.n	80034f6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80034ec:	bf00      	nop
 80034ee:	e002      	b.n	80034f6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80034f0:	bf00      	nop
 80034f2:	e000      	b.n	80034f6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80034f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f040 809f 	bne.w	800363c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034fe:	4b52      	ldr	r3, [pc, #328]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a51      	ldr	r2, [pc, #324]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003504:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350a:	f7fd fe95 	bl	8001238 <HAL_GetTick>
 800350e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003510:	e00f      	b.n	8003532 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003512:	f7fd fe91 	bl	8001238 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d908      	bls.n	8003532 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003520:	4b49      	ldr	r3, [pc, #292]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003530:	e006      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003532:	4b45      	ldr	r3, [pc, #276]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e9      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0x86>
 800353e:	e000      	b.n	8003542 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8003540:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d179      	bne.n	800363c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d116      	bne.n	800357c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800354e:	4b3e      	ldr	r3, [pc, #248]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <RCCEx_PLLSAI1_Config+0x1c0>)
 8003554:	4013      	ands	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6892      	ldr	r2, [r2, #8]
 800355a:	0211      	lsls	r1, r2, #8
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68d2      	ldr	r2, [r2, #12]
 8003560:	06d2      	lsls	r2, r2, #27
 8003562:	4311      	orrs	r1, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6852      	ldr	r2, [r2, #4]
 8003568:	3a01      	subs	r2, #1
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	4311      	orrs	r1, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	4934      	ldr	r1, [pc, #208]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]
 800357a:	e033      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d118      	bne.n	80035b4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003582:	4b31      	ldr	r3, [pc, #196]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	4b32      	ldr	r3, [pc, #200]	; (8003650 <RCCEx_PLLSAI1_Config+0x1c4>)
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6892      	ldr	r2, [r2, #8]
 800358e:	0211      	lsls	r1, r2, #8
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6912      	ldr	r2, [r2, #16]
 8003594:	0852      	lsrs	r2, r2, #1
 8003596:	3a01      	subs	r2, #1
 8003598:	0552      	lsls	r2, r2, #21
 800359a:	4311      	orrs	r1, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6852      	ldr	r2, [r2, #4]
 80035a0:	3a01      	subs	r2, #1
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	4311      	orrs	r1, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	4926      	ldr	r1, [pc, #152]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	610b      	str	r3, [r1, #16]
 80035b2:	e017      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	4b26      	ldr	r3, [pc, #152]	; (8003654 <RCCEx_PLLSAI1_Config+0x1c8>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6892      	ldr	r2, [r2, #8]
 80035c0:	0211      	lsls	r1, r2, #8
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6952      	ldr	r2, [r2, #20]
 80035c6:	0852      	lsrs	r2, r2, #1
 80035c8:	3a01      	subs	r2, #1
 80035ca:	0652      	lsls	r2, r2, #25
 80035cc:	4311      	orrs	r1, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6852      	ldr	r2, [r2, #4]
 80035d2:	3a01      	subs	r2, #1
 80035d4:	0112      	lsls	r2, r2, #4
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	491a      	ldr	r1, [pc, #104]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035e4:	4b18      	ldr	r3, [pc, #96]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 80035ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fd fe22 	bl	8001238 <HAL_GetTick>
 80035f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035f6:	e00f      	b.n	8003618 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f8:	f7fd fe1e 	bl	8001238 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d908      	bls.n	8003618 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8003616:	e006      	b.n	8003626 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0e9      	beq.n	80035f8 <RCCEx_PLLSAI1_Config+0x16c>
 8003624:	e000      	b.n	8003628 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8003626:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	4904      	ldr	r1, [pc, #16]	; (8003648 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	07ff800c 	.word	0x07ff800c
 8003650:	ff9f800c 	.word	0xff9f800c
 8003654:	f9ff800c 	.word	0xf9ff800c

08003658 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d018      	beq.n	80036a0 <RCCEx_PLLSAI2_Config+0x48>
 800366e:	2b03      	cmp	r3, #3
 8003670:	d81f      	bhi.n	80036b2 <RCCEx_PLLSAI2_Config+0x5a>
 8003672:	2b01      	cmp	r3, #1
 8003674:	d002      	beq.n	800367c <RCCEx_PLLSAI2_Config+0x24>
 8003676:	2b02      	cmp	r3, #2
 8003678:	d009      	beq.n	800368e <RCCEx_PLLSAI2_Config+0x36>
 800367a:	e01a      	b.n	80036b2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800367c:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d117      	bne.n	80036b8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800368c:	e014      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800368e:	4b46      	ldr	r3, [pc, #280]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	2b00      	cmp	r3, #0
 8003698:	d110      	bne.n	80036bc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800369e:	e00d      	b.n	80036bc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b0:	e006      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      break;
 80036b6:	e004      	b.n	80036c2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80036b8:	bf00      	nop
 80036ba:	e002      	b.n	80036c2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80036c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d169      	bne.n	800379c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036c8:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a36      	ldr	r2, [pc, #216]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 80036ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d4:	f7fd fdb0 	bl	8001238 <HAL_GetTick>
 80036d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036da:	e00f      	b.n	80036fc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036dc:	f7fd fdac 	bl	8001238 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d908      	bls.n	80036fc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036fa:	e006      	b.n	800370a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e9      	bne.n	80036dc <RCCEx_PLLSAI2_Config+0x84>
 8003708:	e000      	b.n	800370c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800370a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d144      	bne.n	800379c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d115      	bne.n	8003744 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	4b23      	ldr	r3, [pc, #140]	; (80037ac <RCCEx_PLLSAI2_Config+0x154>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6892      	ldr	r2, [r2, #8]
 8003724:	0211      	lsls	r1, r2, #8
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68d2      	ldr	r2, [r2, #12]
 800372a:	06d2      	lsls	r2, r2, #27
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6852      	ldr	r2, [r2, #4]
 8003732:	3a01      	subs	r2, #1
 8003734:	0112      	lsls	r2, r2, #4
 8003736:	4311      	orrs	r1, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	491a      	ldr	r1, [pc, #104]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 8003740:	4313      	orrs	r3, r2
 8003742:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003744:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fd72 	bl	8001238 <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003756:	e00f      	b.n	8003778 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003758:	f7fd fd6e 	bl	8001238 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d908      	bls.n	8003778 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8003776:	e006      	b.n	8003786 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0e9      	beq.n	8003758 <RCCEx_PLLSAI2_Config+0x100>
 8003784:	e000      	b.n	8003788 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8003786:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	4904      	ldr	r1, [pc, #16]	; (80037a8 <RCCEx_PLLSAI2_Config+0x150>)
 8003798:	4313      	orrs	r3, r2
 800379a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	07ff800c 	.word	0x07ff800c

080037b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e042      	b.n	8003848 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fd fb3f 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2224      	movs	r2, #36	; 0x24
 80037de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f001 f8e6 	bl	80049cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fde3 	bl	80043cc <UART_SetConfig>
 8003806:	4603      	mov	r3, r0
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e01b      	b.n	8003848 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800382e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f001 f965 	bl	8004b10 <UART_CheckIdleState>
 8003846:	4603      	mov	r3, r0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	2b20      	cmp	r3, #32
 8003868:	d17b      	bne.n	8003962 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_UART_Transmit+0x26>
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e074      	b.n	8003964 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2221      	movs	r2, #33	; 0x21
 8003886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388a:	f7fd fcd5 	bl	8001238 <HAL_GetTick>
 800388e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d108      	bne.n	80038bc <HAL_UART_Transmit+0x6c>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e003      	b.n	80038c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038c4:	e030      	b.n	8003928 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f001 f9c7 	bl	8004c64 <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e03d      	b.n	8003964 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	3302      	adds	r3, #2
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	e007      	b.n	8003916 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1c8      	bne.n	80038c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2200      	movs	r2, #0
 800393c:	2140      	movs	r1, #64	; 0x40
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f001 f990 	bl	8004c64 <UART_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e006      	b.n	8003964 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003982:	2b20      	cmp	r3, #32
 8003984:	f040 80b5 	bne.w	8003af2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_UART_Receive+0x28>
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0ad      	b.n	8003af4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2222      	movs	r2, #34	; 0x22
 80039a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ae:	f7fd fc43 	bl	8001238 <HAL_GetTick>
 80039b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	88fa      	ldrh	r2, [r7, #6]
 80039b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039cc:	d10e      	bne.n	80039ec <HAL_UART_Receive+0x80>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d105      	bne.n	80039e2 <HAL_UART_Receive+0x76>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039e0:	e02d      	b.n	8003a3e <HAL_UART_Receive+0xd2>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	22ff      	movs	r2, #255	; 0xff
 80039e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039ea:	e028      	b.n	8003a3e <HAL_UART_Receive+0xd2>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_UART_Receive+0xa4>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <HAL_UART_Receive+0x9a>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	22ff      	movs	r2, #255	; 0xff
 8003a00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a04:	e01b      	b.n	8003a3e <HAL_UART_Receive+0xd2>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	227f      	movs	r2, #127	; 0x7f
 8003a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a0e:	e016      	b.n	8003a3e <HAL_UART_Receive+0xd2>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a18:	d10d      	bne.n	8003a36 <HAL_UART_Receive+0xca>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <HAL_UART_Receive+0xc0>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	227f      	movs	r2, #127	; 0x7f
 8003a26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a2a:	e008      	b.n	8003a3e <HAL_UART_Receive+0xd2>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	223f      	movs	r2, #63	; 0x3f
 8003a30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a34:	e003      	b.n	8003a3e <HAL_UART_Receive+0xd2>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003a44:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	d108      	bne.n	8003a62 <HAL_UART_Receive+0xf6>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e003      	b.n	8003a6a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a6a:	e036      	b.n	8003ada <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2200      	movs	r2, #0
 8003a74:	2120      	movs	r1, #32
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f001 f8f4 	bl	8004c64 <UART_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e032      	b.n	8003af4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10c      	bne.n	8003aae <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	8a7b      	ldrh	r3, [r7, #18]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e00c      	b.n	8003ac8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	8a7b      	ldrh	r3, [r7, #18]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	4013      	ands	r3, r2
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1c2      	bne.n	8003a6c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003af2:	2302      	movs	r3, #2
  }
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b0a0      	sub	sp, #128	; 0x80
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b14:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003b18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b24:	667a      	str	r2, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003b28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e6      	bne.n	8003b04 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b48:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3308      	adds	r3, #8
 8003b58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b5a:	657a      	str	r2, [r7, #84]	; 0x54
 8003b5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003b60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e3      	bne.n	8003b36 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d118      	bne.n	8003ba8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	f023 0310 	bic.w	r3, r3, #16
 8003b8a:	677b      	str	r3, [r7, #116]	; 0x74
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b94:	643b      	str	r3, [r7, #64]	; 0x40
 8003b96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e6      	bne.n	8003b76 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b80      	cmp	r3, #128	; 0x80
 8003bb4:	d137      	bne.n	8003c26 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bcc:	673b      	str	r3, [r7, #112]	; 0x70
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e5      	bne.n	8003bb6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d019      	beq.n	8003c26 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd fc35 	bl	800146e <HAL_DMA_Abort>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00d      	beq.n	8003c26 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fce8 	bl	80015e4 <HAL_DMA_GetError>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d105      	bne.n	8003c26 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e073      	b.n	8003d0e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d13b      	bne.n	8003cac <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3308      	adds	r3, #8
 8003c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3308      	adds	r3, #8
 8003c52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c54:	61ba      	str	r2, [r7, #24]
 8003c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6979      	ldr	r1, [r7, #20]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	613b      	str	r3, [r7, #16]
   return(result);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e5      	bne.n	8003c34 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01c      	beq.n	8003cac <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd fbf3 	bl	800146e <HAL_DMA_Abort>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00e      	beq.n	8003cac <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fd fca5 	bl	80015e4 <HAL_DMA_GetError>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d105      	bne.n	8003cac <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e030      	b.n	8003d0e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ccc:	d107      	bne.n	8003cde <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0210 	orr.w	r2, r2, #16
 8003cdc:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0208 	orr.w	r2, r2, #8
 8003cec:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3780      	adds	r7, #128	; 0x80
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b0ba      	sub	sp, #232	; 0xe8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d42:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d46:	4013      	ands	r3, r2
 8003d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11b      	bne.n	8003d8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 82e3 	beq.w	8004348 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
      }
      return;
 8003d8a:	e2dd      	b.n	8004348 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8123 	beq.w	8003fdc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003d9a:	4b8d      	ldr	r3, [pc, #564]	; (8003fd0 <HAL_UART_IRQHandler+0x2b8>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003da2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003da6:	4b8b      	ldr	r3, [pc, #556]	; (8003fd4 <HAL_UART_IRQHandler+0x2bc>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8116 	beq.w	8003fdc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d011      	beq.n	8003de0 <HAL_UART_IRQHandler+0xc8>
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d011      	beq.n	8003e10 <HAL_UART_IRQHandler+0xf8>
 8003dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00b      	beq.n	8003e10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d011      	beq.n	8003e40 <HAL_UART_IRQHandler+0x128>
 8003e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d017      	beq.n	8003e7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003e5c:	4b5c      	ldr	r3, [pc, #368]	; (8003fd0 <HAL_UART_IRQHandler+0x2b8>)
 8003e5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f043 0208 	orr.w	r2, r3, #8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d012      	beq.n	8003eae <HAL_UART_IRQHandler+0x196>
 8003e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00c      	beq.n	8003eae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8249 	beq.w	800434c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d013      	beq.n	8003eee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d005      	beq.n	8003f12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d054      	beq.n	8003fbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 ff13 	bl	8004d3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d146      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1d9      	bne.n	8003f26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d017      	beq.n	8003fac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f82:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <HAL_UART_IRQHandler+0x2c0>)
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fd faca 	bl	8001526 <HAL_DMA_Abort_IT>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d019      	beq.n	8003fcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003faa:	e00f      	b.n	8003fcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f9e1 	bl	8004374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb2:	e00b      	b.n	8003fcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f9dd 	bl	8004374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fba:	e007      	b.n	8003fcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f9d9 	bl	8004374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003fca:	e1bf      	b.n	800434c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fcc:	bf00      	nop
    return;
 8003fce:	e1bd      	b.n	800434c <HAL_UART_IRQHandler+0x634>
 8003fd0:	10000001 	.word	0x10000001
 8003fd4:	04000120 	.word	0x04000120
 8003fd8:	08004e0b 	.word	0x08004e0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	f040 8153 	bne.w	800428c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 814c 	beq.w	800428c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8145 	beq.w	800428c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2210      	movs	r2, #16
 8004008:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	f040 80bb 	bne.w	8004190 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004028:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 818f 	beq.w	8004350 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004038:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800403c:	429a      	cmp	r2, r3
 800403e:	f080 8187 	bcs.w	8004350 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004048:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 8087 	bne.w	800416e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800407c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800408a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800408e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1da      	bne.n	8004060 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3308      	adds	r3, #8
 80040b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e1      	bne.n	80040aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3308      	adds	r3, #8
 80040ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800410a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800410c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004110:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e3      	bne.n	80040e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800413a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800413c:	f023 0310 	bic.w	r3, r3, #16
 8004140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800414e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004150:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800415c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e4      	bne.n	800412c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004168:	4618      	mov	r0, r3
 800416a:	f7fd f980 	bl	800146e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004180:	b29b      	uxth	r3, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	b29b      	uxth	r3, r3
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8fd 	bl	8004388 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800418e:	e0df      	b.n	8004350 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800419c:	b29b      	uxth	r3, r3
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80d1 	beq.w	8004354 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80041b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80cc 	beq.w	8004354 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041de:	647b      	str	r3, [r7, #68]	; 0x44
 80041e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e4      	bne.n	80041bc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3308      	adds	r3, #8
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	623b      	str	r3, [r7, #32]
   return(result);
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800421a:	633a      	str	r2, [r7, #48]	; 0x30
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e1      	bne.n	80041f2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0310 	bic.w	r3, r3, #16
 8004256:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	69b9      	ldr	r1, [r7, #24]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	617b      	str	r3, [r7, #20]
   return(result);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e4      	bne.n	8004242 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800427e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f87f 	bl	8004388 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800428a:	e063      	b.n	8004354 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <HAL_UART_IRQHandler+0x59e>
 8004298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fdec 	bl	8004e8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042b4:	e051      	b.n	800435a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d014      	beq.n	80042ec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80042c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80042ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d03a      	beq.n	8004358 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
    }
    return;
 80042ea:	e035      	b.n	8004358 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_UART_IRQHandler+0x5f4>
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fd96 	bl	8004e36 <UART_EndTransmit_IT>
    return;
 800430a:	e026      	b.n	800435a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <HAL_UART_IRQHandler+0x614>
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fdc5 	bl	8004eb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800432a:	e016      	b.n	800435a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d010      	beq.n	800435a <HAL_UART_IRQHandler+0x642>
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	2b00      	cmp	r3, #0
 800433e:	da0c      	bge.n	800435a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fdad 	bl	8004ea0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004346:	e008      	b.n	800435a <HAL_UART_IRQHandler+0x642>
      return;
 8004348:	bf00      	nop
 800434a:	e006      	b.n	800435a <HAL_UART_IRQHandler+0x642>
    return;
 800434c:	bf00      	nop
 800434e:	e004      	b.n	800435a <HAL_UART_IRQHandler+0x642>
      return;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <HAL_UART_IRQHandler+0x642>
      return;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <HAL_UART_IRQHandler+0x642>
    return;
 8004358:	bf00      	nop
  }
}
 800435a:	37e8      	adds	r7, #232	; 0xe8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4313      	orrs	r3, r2
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d0:	b08c      	sub	sp, #48	; 0x30
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4baa      	ldr	r3, [pc, #680]	; (80046a4 <UART_SetConfig+0x2d8>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004404:	430b      	orrs	r3, r1
 8004406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a9f      	ldr	r2, [pc, #636]	; (80046a8 <UART_SetConfig+0x2dc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004434:	4313      	orrs	r3, r2
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004442:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800444c:	430b      	orrs	r3, r1
 800444e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	f023 010f 	bic.w	r1, r3, #15
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a90      	ldr	r2, [pc, #576]	; (80046ac <UART_SetConfig+0x2e0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d125      	bne.n	80044bc <UART_SetConfig+0xf0>
 8004470:	4b8f      	ldr	r3, [pc, #572]	; (80046b0 <UART_SetConfig+0x2e4>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d81a      	bhi.n	80044b4 <UART_SetConfig+0xe8>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0xb8>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	08004495 	.word	0x08004495
 8004488:	080044a5 	.word	0x080044a5
 800448c:	0800449d 	.word	0x0800449d
 8004490:	080044ad 	.word	0x080044ad
 8004494:	2301      	movs	r3, #1
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449a:	e116      	b.n	80046ca <UART_SetConfig+0x2fe>
 800449c:	2302      	movs	r3, #2
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a2:	e112      	b.n	80046ca <UART_SetConfig+0x2fe>
 80044a4:	2304      	movs	r3, #4
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044aa:	e10e      	b.n	80046ca <UART_SetConfig+0x2fe>
 80044ac:	2308      	movs	r3, #8
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b2:	e10a      	b.n	80046ca <UART_SetConfig+0x2fe>
 80044b4:	2310      	movs	r3, #16
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ba:	e106      	b.n	80046ca <UART_SetConfig+0x2fe>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a7c      	ldr	r2, [pc, #496]	; (80046b4 <UART_SetConfig+0x2e8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d138      	bne.n	8004538 <UART_SetConfig+0x16c>
 80044c6:	4b7a      	ldr	r3, [pc, #488]	; (80046b0 <UART_SetConfig+0x2e4>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d82d      	bhi.n	8004530 <UART_SetConfig+0x164>
 80044d4:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <UART_SetConfig+0x110>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004511 	.word	0x08004511
 80044e0:	08004531 	.word	0x08004531
 80044e4:	08004531 	.word	0x08004531
 80044e8:	08004531 	.word	0x08004531
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004531 	.word	0x08004531
 80044f4:	08004531 	.word	0x08004531
 80044f8:	08004531 	.word	0x08004531
 80044fc:	08004519 	.word	0x08004519
 8004500:	08004531 	.word	0x08004531
 8004504:	08004531 	.word	0x08004531
 8004508:	08004531 	.word	0x08004531
 800450c:	08004529 	.word	0x08004529
 8004510:	2300      	movs	r3, #0
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004516:	e0d8      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004518:	2302      	movs	r3, #2
 800451a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451e:	e0d4      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004520:	2304      	movs	r3, #4
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004526:	e0d0      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004528:	2308      	movs	r3, #8
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452e:	e0cc      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004530:	2310      	movs	r3, #16
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004536:	e0c8      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a5e      	ldr	r2, [pc, #376]	; (80046b8 <UART_SetConfig+0x2ec>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d125      	bne.n	800458e <UART_SetConfig+0x1c2>
 8004542:	4b5b      	ldr	r3, [pc, #364]	; (80046b0 <UART_SetConfig+0x2e4>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800454c:	2b30      	cmp	r3, #48	; 0x30
 800454e:	d016      	beq.n	800457e <UART_SetConfig+0x1b2>
 8004550:	2b30      	cmp	r3, #48	; 0x30
 8004552:	d818      	bhi.n	8004586 <UART_SetConfig+0x1ba>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d00a      	beq.n	800456e <UART_SetConfig+0x1a2>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d814      	bhi.n	8004586 <UART_SetConfig+0x1ba>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <UART_SetConfig+0x19a>
 8004560:	2b10      	cmp	r3, #16
 8004562:	d008      	beq.n	8004576 <UART_SetConfig+0x1aa>
 8004564:	e00f      	b.n	8004586 <UART_SetConfig+0x1ba>
 8004566:	2300      	movs	r3, #0
 8004568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456c:	e0ad      	b.n	80046ca <UART_SetConfig+0x2fe>
 800456e:	2302      	movs	r3, #2
 8004570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004574:	e0a9      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004576:	2304      	movs	r3, #4
 8004578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457c:	e0a5      	b.n	80046ca <UART_SetConfig+0x2fe>
 800457e:	2308      	movs	r3, #8
 8004580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004584:	e0a1      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004586:	2310      	movs	r3, #16
 8004588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458c:	e09d      	b.n	80046ca <UART_SetConfig+0x2fe>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a4a      	ldr	r2, [pc, #296]	; (80046bc <UART_SetConfig+0x2f0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d125      	bne.n	80045e4 <UART_SetConfig+0x218>
 8004598:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <UART_SetConfig+0x2e4>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045a2:	2bc0      	cmp	r3, #192	; 0xc0
 80045a4:	d016      	beq.n	80045d4 <UART_SetConfig+0x208>
 80045a6:	2bc0      	cmp	r3, #192	; 0xc0
 80045a8:	d818      	bhi.n	80045dc <UART_SetConfig+0x210>
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d00a      	beq.n	80045c4 <UART_SetConfig+0x1f8>
 80045ae:	2b80      	cmp	r3, #128	; 0x80
 80045b0:	d814      	bhi.n	80045dc <UART_SetConfig+0x210>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <UART_SetConfig+0x1f0>
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d008      	beq.n	80045cc <UART_SetConfig+0x200>
 80045ba:	e00f      	b.n	80045dc <UART_SetConfig+0x210>
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c2:	e082      	b.n	80046ca <UART_SetConfig+0x2fe>
 80045c4:	2302      	movs	r3, #2
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ca:	e07e      	b.n	80046ca <UART_SetConfig+0x2fe>
 80045cc:	2304      	movs	r3, #4
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d2:	e07a      	b.n	80046ca <UART_SetConfig+0x2fe>
 80045d4:	2308      	movs	r3, #8
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045da:	e076      	b.n	80046ca <UART_SetConfig+0x2fe>
 80045dc:	2310      	movs	r3, #16
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e2:	e072      	b.n	80046ca <UART_SetConfig+0x2fe>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <UART_SetConfig+0x2f4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d12a      	bne.n	8004644 <UART_SetConfig+0x278>
 80045ee:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <UART_SetConfig+0x2e4>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fc:	d01a      	beq.n	8004634 <UART_SetConfig+0x268>
 80045fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004602:	d81b      	bhi.n	800463c <UART_SetConfig+0x270>
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d00c      	beq.n	8004624 <UART_SetConfig+0x258>
 800460a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460e:	d815      	bhi.n	800463c <UART_SetConfig+0x270>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <UART_SetConfig+0x250>
 8004614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004618:	d008      	beq.n	800462c <UART_SetConfig+0x260>
 800461a:	e00f      	b.n	800463c <UART_SetConfig+0x270>
 800461c:	2300      	movs	r3, #0
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004622:	e052      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004624:	2302      	movs	r3, #2
 8004626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462a:	e04e      	b.n	80046ca <UART_SetConfig+0x2fe>
 800462c:	2304      	movs	r3, #4
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004632:	e04a      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004634:	2308      	movs	r3, #8
 8004636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463a:	e046      	b.n	80046ca <UART_SetConfig+0x2fe>
 800463c:	2310      	movs	r3, #16
 800463e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004642:	e042      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <UART_SetConfig+0x2dc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d13a      	bne.n	80046c4 <UART_SetConfig+0x2f8>
 800464e:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <UART_SetConfig+0x2e4>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004654:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800465c:	d01a      	beq.n	8004694 <UART_SetConfig+0x2c8>
 800465e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004662:	d81b      	bhi.n	800469c <UART_SetConfig+0x2d0>
 8004664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004668:	d00c      	beq.n	8004684 <UART_SetConfig+0x2b8>
 800466a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466e:	d815      	bhi.n	800469c <UART_SetConfig+0x2d0>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <UART_SetConfig+0x2b0>
 8004674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004678:	d008      	beq.n	800468c <UART_SetConfig+0x2c0>
 800467a:	e00f      	b.n	800469c <UART_SetConfig+0x2d0>
 800467c:	2300      	movs	r3, #0
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004682:	e022      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004684:	2302      	movs	r3, #2
 8004686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468a:	e01e      	b.n	80046ca <UART_SetConfig+0x2fe>
 800468c:	2304      	movs	r3, #4
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004692:	e01a      	b.n	80046ca <UART_SetConfig+0x2fe>
 8004694:	2308      	movs	r3, #8
 8004696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469a:	e016      	b.n	80046ca <UART_SetConfig+0x2fe>
 800469c:	2310      	movs	r3, #16
 800469e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a2:	e012      	b.n	80046ca <UART_SetConfig+0x2fe>
 80046a4:	cfff69f3 	.word	0xcfff69f3
 80046a8:	40008000 	.word	0x40008000
 80046ac:	40013800 	.word	0x40013800
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40004400 	.word	0x40004400
 80046b8:	40004800 	.word	0x40004800
 80046bc:	40004c00 	.word	0x40004c00
 80046c0:	40005000 	.word	0x40005000
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4ab0      	ldr	r2, [pc, #704]	; (8004990 <UART_SetConfig+0x5c4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	f040 809b 	bne.w	800480c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d827      	bhi.n	800472e <UART_SetConfig+0x362>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x318>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004719 	.word	0x08004719
 80046f0:	0800472f 	.word	0x0800472f
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800472f 	.word	0x0800472f
 80046fc:	0800472f 	.word	0x0800472f
 8004700:	0800472f 	.word	0x0800472f
 8004704:	08004727 	.word	0x08004727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7fe fa42 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 800470c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800470e:	e014      	b.n	800473a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004710:	f7fe fa52 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004716:	e010      	b.n	800473a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004718:	4b9e      	ldr	r3, [pc, #632]	; (8004994 <UART_SetConfig+0x5c8>)
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800471c:	e00d      	b.n	800473a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800471e:	f7fe f985 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004724:	e009      	b.n	800473a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800472c:	e005      	b.n	800473a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8130 	beq.w	80049a2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	4a94      	ldr	r2, [pc, #592]	; (8004998 <UART_SetConfig+0x5cc>)
 8004748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800474c:	461a      	mov	r2, r3
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	fbb3 f3f2 	udiv	r3, r3, r2
 8004754:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4413      	add	r3, r2
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	429a      	cmp	r2, r3
 8004764:	d305      	bcc.n	8004772 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	429a      	cmp	r2, r3
 8004770:	d903      	bls.n	800477a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004778:	e113      	b.n	80049a2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	2200      	movs	r2, #0
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	60fa      	str	r2, [r7, #12]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	4a84      	ldr	r2, [pc, #528]	; (8004998 <UART_SetConfig+0x5cc>)
 8004788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800478c:	b29b      	uxth	r3, r3
 800478e:	2200      	movs	r2, #0
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004798:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800479c:	f7fb fd4a 	bl	8000234 <__aeabi_uldivmod>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	020b      	lsls	r3, r1, #8
 80047b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047b6:	0202      	lsls	r2, r0, #8
 80047b8:	6979      	ldr	r1, [r7, #20]
 80047ba:	6849      	ldr	r1, [r1, #4]
 80047bc:	0849      	lsrs	r1, r1, #1
 80047be:	2000      	movs	r0, #0
 80047c0:	460c      	mov	r4, r1
 80047c2:	4605      	mov	r5, r0
 80047c4:	eb12 0804 	adds.w	r8, r2, r4
 80047c8:	eb43 0905 	adc.w	r9, r3, r5
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	469a      	mov	sl, r3
 80047d4:	4693      	mov	fp, r2
 80047d6:	4652      	mov	r2, sl
 80047d8:	465b      	mov	r3, fp
 80047da:	4640      	mov	r0, r8
 80047dc:	4649      	mov	r1, r9
 80047de:	f7fb fd29 	bl	8000234 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4613      	mov	r3, r2
 80047e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f0:	d308      	bcc.n	8004804 <UART_SetConfig+0x438>
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f8:	d204      	bcs.n	8004804 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	e0ce      	b.n	80049a2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800480a:	e0ca      	b.n	80049a2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004814:	d166      	bne.n	80048e4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800481a:	2b08      	cmp	r3, #8
 800481c:	d827      	bhi.n	800486e <UART_SetConfig+0x4a2>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0x458>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	0800486f 	.word	0x0800486f
 8004834:	0800485f 	.word	0x0800485f
 8004838:	0800486f 	.word	0x0800486f
 800483c:	0800486f 	.word	0x0800486f
 8004840:	0800486f 	.word	0x0800486f
 8004844:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7fe f9a2 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 800484c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800484e:	e014      	b.n	800487a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7fe f9b2 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004856:	e010      	b.n	800487a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b4e      	ldr	r3, [pc, #312]	; (8004994 <UART_SetConfig+0x5c8>)
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800485c:	e00d      	b.n	800487a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe f8e5 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004864:	e009      	b.n	800487a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800486c:	e005      	b.n	800487a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8090 	beq.w	80049a2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	4a44      	ldr	r2, [pc, #272]	; (8004998 <UART_SetConfig+0x5cc>)
 8004888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800488c:	461a      	mov	r2, r3
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	fbb3 f3f2 	udiv	r3, r3, r2
 8004894:	005a      	lsls	r2, r3, #1
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	441a      	add	r2, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	d916      	bls.n	80048dc <UART_SetConfig+0x510>
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d212      	bcs.n	80048dc <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	f023 030f 	bic.w	r3, r3, #15
 80048be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	8bfb      	ldrh	r3, [r7, #30]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	8bfa      	ldrh	r2, [r7, #30]
 80048d8:	60da      	str	r2, [r3, #12]
 80048da:	e062      	b.n	80049a2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048e2:	e05e      	b.n	80049a2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d828      	bhi.n	800493e <UART_SetConfig+0x572>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <UART_SetConfig+0x528>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004919 	.word	0x08004919
 80048f8:	08004921 	.word	0x08004921
 80048fc:	08004929 	.word	0x08004929
 8004900:	0800493f 	.word	0x0800493f
 8004904:	0800492f 	.word	0x0800492f
 8004908:	0800493f 	.word	0x0800493f
 800490c:	0800493f 	.word	0x0800493f
 8004910:	0800493f 	.word	0x0800493f
 8004914:	08004937 	.word	0x08004937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004918:	f7fe f93a 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 800491c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800491e:	e014      	b.n	800494a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004920:	f7fe f94a 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8004924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004926:	e010      	b.n	800494a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004928:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <UART_SetConfig+0x5c8>)
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800492c:	e00d      	b.n	800494a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800492e:	f7fe f87d 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8004932:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004934:	e009      	b.n	800494a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800493c:	e005      	b.n	800494a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004948:	bf00      	nop
    }

    if (pclk != 0U)
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	2b00      	cmp	r3, #0
 800494e:	d028      	beq.n	80049a2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	4a10      	ldr	r2, [pc, #64]	; (8004998 <UART_SetConfig+0x5cc>)
 8004956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800495a:	461a      	mov	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	441a      	add	r2, r3
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d910      	bls.n	800499c <UART_SetConfig+0x5d0>
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d20c      	bcs.n	800499c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	b29a      	uxth	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	e009      	b.n	80049a2 <UART_SetConfig+0x5d6>
 800498e:	bf00      	nop
 8004990:	40008000 	.word	0x40008000
 8004994:	00f42400 	.word	0x00f42400
 8004998:	080052c4 	.word	0x080052c4
      }
      else
      {
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2200      	movs	r2, #0
 80049b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2200      	movs	r2, #0
 80049bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80049be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3730      	adds	r7, #48	; 0x30
 80049c6:	46bd      	mov	sp, r7
 80049c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01a      	beq.n	8004ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aca:	d10a      	bne.n	8004ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  }
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b098      	sub	sp, #96	; 0x60
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b20:	f7fc fb8a 	bl	8001238 <HAL_GetTick>
 8004b24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d12f      	bne.n	8004b94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f88e 	bl	8004c64 <UART_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d022      	beq.n	8004b94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b62:	653b      	str	r3, [r7, #80]	; 0x50
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e6      	bne.n	8004b4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e063      	b.n	8004c5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d149      	bne.n	8004c36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004baa:	2200      	movs	r2, #0
 8004bac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f857 	bl	8004c64 <UART_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d03c      	beq.n	8004c36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bda:	633b      	str	r3, [r7, #48]	; 0x30
 8004bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e6      	bne.n	8004bbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0e:	61fa      	str	r2, [r7, #28]
 8004c10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	69b9      	ldr	r1, [r7, #24]
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e5      	bne.n	8004bee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e012      	b.n	8004c5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3758      	adds	r7, #88	; 0x58
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c74:	e04f      	b.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d04b      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7fc fadb 	bl	8001238 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e04e      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d037      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b80      	cmp	r3, #128	; 0x80
 8004caa:	d034      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d031      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d110      	bne.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f838 	bl	8004d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e029      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf0:	d111      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f81e 	bl	8004d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e00f      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	bf0c      	ite	eq
 8004d26:	2301      	moveq	r3, #1
 8004d28:	2300      	movne	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d0a0      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b095      	sub	sp, #84	; 0x54
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d64:	643b      	str	r3, [r7, #64]	; 0x40
 8004d66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e6      	bne.n	8004d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e3      	bne.n	8004d78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d118      	bne.n	8004dea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 0310 	bic.w	r3, r3, #16
 8004dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6979      	ldr	r1, [r7, #20]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	613b      	str	r3, [r7, #16]
   return(result);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e6      	bne.n	8004db8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004dfe:	bf00      	nop
 8004e00:	3754      	adds	r7, #84	; 0x54
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff faa3 	bl	8004374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b088      	sub	sp, #32
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e6      	bne.n	8004e3e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff fa6e 	bl	8004360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e84:	bf00      	nop
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_UARTEx_DisableFifoMode+0x16>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e027      	b.n	8004f2e <HAL_UARTEx_DisableFifoMode+0x66>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2224      	movs	r2, #36	; 0x24
 8004eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e02d      	b.n	8004fae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2224      	movs	r2, #36	; 0x24
 8004f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f850 	bl	8005034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e02d      	b.n	800502a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2224      	movs	r2, #36	; 0x24
 8004fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f812 	bl	8005034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005040:	2b00      	cmp	r3, #0
 8005042:	d108      	bne.n	8005056 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005054:	e031      	b.n	80050ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005056:	2308      	movs	r3, #8
 8005058:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800505a:	2308      	movs	r3, #8
 800505c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	0e5b      	lsrs	r3, r3, #25
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	0f5b      	lsrs	r3, r3, #29
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	7b3a      	ldrb	r2, [r7, #12]
 8005082:	4911      	ldr	r1, [pc, #68]	; (80050c8 <UARTEx_SetNbDataToProcess+0x94>)
 8005084:	5c8a      	ldrb	r2, [r1, r2]
 8005086:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800508a:	7b3a      	ldrb	r2, [r7, #12]
 800508c:	490f      	ldr	r1, [pc, #60]	; (80050cc <UARTEx_SetNbDataToProcess+0x98>)
 800508e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005090:	fb93 f3f2 	sdiv	r3, r3, r2
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	7b7a      	ldrb	r2, [r7, #13]
 80050a0:	4909      	ldr	r1, [pc, #36]	; (80050c8 <UARTEx_SetNbDataToProcess+0x94>)
 80050a2:	5c8a      	ldrb	r2, [r1, r2]
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050a8:	7b7a      	ldrb	r2, [r7, #13]
 80050aa:	4908      	ldr	r1, [pc, #32]	; (80050cc <UARTEx_SetNbDataToProcess+0x98>)
 80050ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	080052dc 	.word	0x080052dc
 80050cc:	080052e4 	.word	0x080052e4

080050d0 <__libc_init_array>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4d0d      	ldr	r5, [pc, #52]	; (8005108 <__libc_init_array+0x38>)
 80050d4:	2600      	movs	r6, #0
 80050d6:	4c0d      	ldr	r4, [pc, #52]	; (800510c <__libc_init_array+0x3c>)
 80050d8:	1b64      	subs	r4, r4, r5
 80050da:	10a4      	asrs	r4, r4, #2
 80050dc:	42a6      	cmp	r6, r4
 80050de:	d109      	bne.n	80050f4 <__libc_init_array+0x24>
 80050e0:	4d0b      	ldr	r5, [pc, #44]	; (8005110 <__libc_init_array+0x40>)
 80050e2:	2600      	movs	r6, #0
 80050e4:	4c0b      	ldr	r4, [pc, #44]	; (8005114 <__libc_init_array+0x44>)
 80050e6:	f000 f81f 	bl	8005128 <_init>
 80050ea:	1b64      	subs	r4, r4, r5
 80050ec:	10a4      	asrs	r4, r4, #2
 80050ee:	42a6      	cmp	r6, r4
 80050f0:	d105      	bne.n	80050fe <__libc_init_array+0x2e>
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f8:	3601      	adds	r6, #1
 80050fa:	4798      	blx	r3
 80050fc:	e7ee      	b.n	80050dc <__libc_init_array+0xc>
 80050fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005102:	3601      	adds	r6, #1
 8005104:	4798      	blx	r3
 8005106:	e7f2      	b.n	80050ee <__libc_init_array+0x1e>
 8005108:	080052f4 	.word	0x080052f4
 800510c:	080052f4 	.word	0x080052f4
 8005110:	080052f4 	.word	0x080052f4
 8005114:	080052f8 	.word	0x080052f8

08005118 <memset>:
 8005118:	4402      	add	r2, r0
 800511a:	4603      	mov	r3, r0
 800511c:	4293      	cmp	r3, r2
 800511e:	d100      	bne.n	8005122 <memset+0xa>
 8005120:	4770      	bx	lr
 8005122:	f803 1b01 	strb.w	r1, [r3], #1
 8005126:	e7f9      	b.n	800511c <memset+0x4>

08005128 <_init>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr

08005134 <_fini>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	bf00      	nop
 8005138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513a:	bc08      	pop	{r3}
 800513c:	469e      	mov	lr, r3
 800513e:	4770      	bx	lr
